// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProposalMetaData contains all meta data concerning the Proposal contract.
var ProposalMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"joinTime\",\"type\":\"uint256\"}],\"name\":\"AuthorityAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"joinTime\",\"type\":\"uint256\"}],\"name\":\"AuthorityDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"candidateServiceUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submitBlockNo\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ProposalResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"WithdrawProposal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"effectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAuthority\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposalId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"getProposalId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"serviceUrl\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"proposalUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"candidateServiceUrl\",\"type\":\"string\"}],\"name\":\"submitProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"withdrawProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612dc2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637c95ac2711610097578063c7f758a811610066578063c7f758a8146101eb578063e1f02ffa14610211578063f2fde38b14610224578063f399e22e1461023757600080fd5b80637c95ac2714610193578063807896d5146101a65780638da5cb5b146101b95780638eee1588146101d457600080fd5b80636e9960c3116100d35780636e9960c314610140578063715018a61461015757806379717e881461015f5780637983d3171461017257600080fd5b80634504109c146100fa57806351ba9c541461010f5780635944d7af1461012d575b600080fd5b61010d61010836600461272a565b61024a565b005b6101176102f5565b604051610124919061278f565b60405180910390f35b61010d61013b366004612863565b61034d565b610148610992565b60405161012493929190612935565b61010d610aa8565b61010d61016d366004612969565b610abc565b610185610180366004612982565b6115a7565b604051908152602001610124565b6101176101a1366004612969565b6115e4565b61010d6101b4366004612969565b611745565b6033546040516001600160a01b039091168152602001610124565b6101dc611a8e565b604051610124939291906129d6565b6101fe6101f9366004612969565b611d12565b6040516101249796959493929190612a5b565b61010d61021f366004612969565b611ef3565b61010d610232366004612abc565b612216565b61010d610245366004612ad7565b61228f565b606560008154811061025e5761025e612b25565b60009182526020909120600390910201546001600160a01b031633146102c45760405162461bcd60e51b81526020600482015260166024820152754f6e6c792061646d696e2063616e20646f207468697360501b60448201526064015b60405180910390fd5b60018216156102d35760668190555b60028216156102e25760678190555b60048216156102f15760688190555b5050565b6060606a80548060200260200160405190810160405280929190818152602001828054801561034357602002820191906000526020600020905b81548152602001906001019080831161032f575b5050505050905090565b60ff841660011480610362575060ff84166002145b80610370575060ff84166003145b6103b45760405162461bcd60e51b8152602060048201526015602482015274496e76616c69642050726f706f73616c207479706560581b60448201526064016102bb565b606554600090815b8181101561041b57336001600160a01b0316606582815481106103e1576103e1612b25565b60009182526020909120600390910201546001600160a01b031603610409576001925061041b565b8061041381612b51565b9150506103bc565b50816104395760405162461bcd60e51b81526004016102bb90612b6a565b6000805b8281101561049c57856001600160a01b03166065828154811061046257610462612b25565b60009182526020909120600390910201546001600160a01b03160361048a576001915061049c565b8061049481612b51565b91505061043d565b5060ff871660010361050e5780156105095760405162461bcd60e51b815260206004820152602a60248201527f63616e64696461746520697320616c726561647920696e2074686520617574686044820152691bdc9a5d1e481b1a5cdd60b21b60648201526084016102bb565b61061a565b8061056a5760405162461bcd60e51b815260206004820152602660248201527f63616e646964617465206973206e6f7420696e2074686520617574686f7269746044820152651e481b1a5cdd60d21b60648201526084016102bb565b606560008154811061057e5761057e612b25565b60009182526020909120600390910201546001600160a01b039081169086160361061a5760405162461bcd60e51b815260206004820152604160248201527f61646d696e206973207468652070726f6a65637420706172747920616e64206360448201527f616e6e6f742077697468647261772066726f6d2074686520636f6d6d697474656064820152606560f81b608482015260a4016102bb565b606a5460005b818110156106e257866001600160a01b0316606b6000606a848154811061064957610649612b25565b600091825260208083209091015483528201929092526040019020600301546001600160a01b0316036106d05760405162461bcd60e51b815260206004820152602960248201527f63616e64696461746520697320616c726561647920696e206f6e65206f70656e604482015268081c1c9bdc1bdcd85b60ba1b60648201526084016102bb565b806106da81612b51565b915050610620565b5060ff8816600214806106f8575060ff88166003145b156107b25760005b818110156107b057866001600160a01b0316606b6000606a848154811061072957610729612b25565b600091825260208083209091015483528201929092526040019020600201546001600160a01b03160361079e5760405162461bcd60e51b815260206004820152601d60248201527f63616e64696461746520686173206f70656e2070726f706f73616c732e00000060448201526064016102bb565b806107a881612b51565b915050610700565b505b6040518060e001604052808960ff168152602001888152602001336001600160a01b03168152602001876001600160a01b03168152602001868152602001438152602001600067ffffffffffffffff811115610810576108106127a9565b604051908082528060200260200182016040528015610839578160200160208202803683370190505b5090526069546000908152606b602090815260409091208251815460ff191660ff909116178155828201518051919261087a92600185019290910190612557565b5060408201516002820180546001600160a01b039283166001600160a01b0319918216179091556060840151600384018054919093169116179055608082015180516108d0916004840191602090910190612557565b5060a0820151600582015560c082015180516108f69160068401916020909101906125db565b5050606954606a80546001810182556000919091527f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a510181905560405133925060ff8b1691907fe164703263a5127c249f60b9b2536e9e15ff486c85cfe32fd2a128eae337b1849061096f908b908b908e904390612b96565b60405180910390a4606954610985906001612bde565b6069555050505050505050565b60006060600060656000815481106109ac576109ac612b25565b60009182526020822060039091020154606580546001600160a01b039092169290916109da576109da612b25565b906000526020600020906003020160010160656000815481106109ff576109ff612b25565b906000526020600020906003020160020154818054610a1d90612bf6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4990612bf6565b8015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b50505050509150925092509250909192565b610ab06124ab565b610aba6000612505565b565b606a546000908190815b81811015610b105784606a8281548110610ae257610ae2612b25565b906000526020600020015403610afe5760019350809250610b10565b80610b0881612b51565b915050610ac6565b5082610b2e5760405162461bcd60e51b81526004016102bb90612c30565b6000848152606b60205260409020600201546001600160a01b03163314610b675760405162461bcd60e51b81526004016102bb90612b6a565b6065546000858152606b602052604081205490919060ff16600303610ed7576068546000878152606b6020526040902060050154610ba59190612bde565b431015610bfe5760405162461bcd60e51b815260206004820152602160248201527f4e6f74207265616368696e67207468652065666665637469766520706572696f6044820152601960fa1b60648201526084016102bb565b60008060005b83811015610c7b576000898152606b6020526040902060030154606580546001600160a01b039092169183908110610c3e57610c3e612b25565b60009182526020909120600390910201546001600160a01b031603610c695760019150809250610c7b565b80610c7381612b51565b915050610c04565b5080610cbd5760405162461bcd60e51b8152602060048201526011602482015270696e76616c69642063616e64696461746560781b60448201526064016102bb565b7fddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b60658381548110610cf157610cf1612b25565b6000918252602090912060039091020154606580546001600160a01b039092169185908110610d2257610d22612b25565b906000526020600020906003020160010160658581548110610d4657610d46612b25565b906000526020600020906003020160020154604051610d6793929190612c5d565b60405180910390a1815b610d7c600185612d1e565b811015610e2b576065610d90826001612bde565b81548110610da057610da0612b25565b906000526020600020906003020160658281548110610dc157610dc1612b25565b60009182526020909120825460039092020180546001600160a01b0319166001600160a01b039092169190911781556001808301805491830191610e0490612bf6565b610e0f929190612630565b5060029182015491015580610e2381612b51565b915050610d71565b506065610e39600185612d1e565b81548110610e4957610e49612b25565b60009182526020822060039091020180546001600160a01b031916815590610e7460018301826126ab565b600282016000905550506065805480610e8f57610e8f612d35565b60008281526020812060036000199093019283020180546001600160a01b031916815590610ec060018301826126ab565b600282016000905550509055600193505050611438565b6067546066546000888152606b6020526040902060050154610ef99190612bde565b610f039190612bde565b4311610f485760405162461bcd60e51b8152602060048201526014602482015273159bdd1a5b99c81a185cc81b9bdd08195b99195960621b60448201526064016102bb565b6000868152606b6020526040812060060154906003610f68846002612d4b565b610f729190612d6a565b905080821193508315611435576000888152606b602052604090205460ff16600103611164576040805160608101825260008a8152606b602081815293822060038101546001600160a01b031684528c835290845260040180549193830191610fda90612bf6565b80601f016020809104026020016040519081016040528092919081815260200182805461100690612bf6565b80156110535780601f1061102857610100808354040283529160200191611053565b820191906000526020600020905b81548152906001019060200180831161103657829003601f168201915b5050509183525050426020918201526065805460018101825560009190915282517f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7600390920291820180546001600160a01b0319166001600160a01b03909216919091178155838301518051949550859491936110f6937f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c80192910190612557565b5060409182015160029091015560008a8152606b602052819020600381015491517ffc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f92611156926001600160a01b03909116916004909101904290612c5d565b60405180910390a150611435565b60008060005b858110156111e15760008b8152606b6020526040902060030154606580546001600160a01b0390921691839081106111a4576111a4612b25565b60009182526020909120600390910201546001600160a01b0316036111cf57600191508092506111e1565b806111d981612b51565b91505061116a565b50806112235760405162461bcd60e51b8152602060048201526011602482015270696e76616c69642063616e64696461746560781b60448201526064016102bb565b7fddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b6065838154811061125757611257612b25565b6000918252602090912060039091020154606580546001600160a01b03909216918590811061128857611288612b25565b9060005260206000209060030201600101606585815481106112ac576112ac612b25565b9060005260206000209060030201600201546040516112cd93929190612c5d565b60405180910390a1815b6112e2600187612d1e565b8110156113915760656112f6826001612bde565b8154811061130657611306612b25565b90600052602060002090600302016065828154811061132757611327612b25565b60009182526020909120825460039092020180546001600160a01b0319166001600160a01b03909216919091178155600180830180549183019161136a90612bf6565b611375929190612630565b506002918201549101558061138981612b51565b9150506112d7565b50606561139f600187612d1e565b815481106113af576113af612b25565b60009182526020822060039091020180546001600160a01b0319168155906113da60018301826126ab565b6002820160009055505060658054806113f5576113f5612d35565b60008281526020812060036000199093019283020180546001600160a01b03191681559061142660018301826126ab565b60028201600090555050905550505b50505b835b611445600185612d1e565b8110156114a557606a611459826001612bde565b8154811061146957611469612b25565b9060005260206000200154606a828154811061148757611487612b25565b6000918252602090912001558061149d81612b51565b91505061143a565b50606a6114b3600185612d1e565b815481106114c3576114c3612b25565b6000918252602082200155606a8054806114df576114df612d35565b600082815260208082208301600019908101839055909201909255878252606b905260408120805460ff191681559061151b60018301826126ab565b6002820180546001600160a01b031990811690915560038301805490911690556115496004830160006126ab565b600582016000905560068201600061156191906126e5565b5050857f35baaec8d9c9da1c77f27119243a4384b49eae2bf0680aa0eebe3b62d28574a583604051611597911515815260200190565b60405180910390a2505050505050565b600060018216156115ba57505060665490565b60028216156115cb57505060675490565b60048216156115dc57505060685490565b506000919050565b606a546060906000805b828110156116505784606b6000606a848154811061160e5761160e612b25565b90600052602060002001548152602001908152602001600020600501541061163e578161163a81612b51565b9250505b8061164881612b51565b9150506115ee565b5060008167ffffffffffffffff81111561166c5761166c6127a9565b604051908082528060200260200182016040528015611695578160200160208202803683370190505b5090506000915060005b8381101561173c5785606b6000606a84815481106116bf576116bf612b25565b90600052602060002001548152602001908152602001600020600501541061172a57606a81815481106116f4576116f4612b25565b906000526020600020015482848151811061171157611711612b25565b60209081029190910101528261172681612b51565b9350505b8061173481612b51565b91505061169f565b50949350505050565b606a54600090815b818110156117945783606a828154811061176957611769612b25565b9060005260206000200154036117825760019250611794565b8061178c81612b51565b91505061174d565b50816117b25760405162461bcd60e51b81526004016102bb90612c30565b6000838152606b602052604090205460ff166003036118225760405162461bcd60e51b815260206004820152602660248201527f4175746f6d61746963206578697420646f6573206e6f742072657175697265206044820152656120766f746560d01b60648201526084016102bb565b606554600090815b8181101561188957336001600160a01b03166065828154811061184f5761184f612b25565b60009182526020909120600390910201546001600160a01b0316036118775760019250611889565b8061188181612b51565b91505061182a565b50816118a75760405162461bcd60e51b81526004016102bb90612b6a565b6066546000868152606b60205260409020600501546118c69190612bde565b431015801561190057506067546066546000878152606b60205260409020600501546118f29190612bde565b6118fc9190612bde565b4311155b6119615760405162461bcd60e51b815260206004820152602c60248201527f566f74696e672073686f756c642062652077697468696e20746865207370656360448201526b1a599a5959081c195c9a5bd960a21b60648201526084016102bb565b6000858152606b6020526040812060060154815b818110156119d8576000888152606b602052604090206006018054339190839081106119a3576119a3612b25565b6000918252602090912001546001600160a01b0316036119c657600192506119d8565b806119d081612b51565b915050611975565b508115611a1a5760405162461bcd60e51b815260206004820152601060248201526f21b0b713ba103b37ba329030b3b0b4b760811b60448201526064016102bb565b6000878152606b6020908152604080832060060180546001810182559084529282902090920180546001600160a01b03191633908117909155915191825288917fbb62908d9b5227a7f81807cfb2651e7167dc90cf52f25cdbd8f232ea7cb7f9c3910160405180910390a250505050505050565b6065546060908190819060008167ffffffffffffffff811115611ab357611ab36127a9565b604051908082528060200260200182016040528015611adc578160200160208202803683370190505b50905060008267ffffffffffffffff811115611afa57611afa6127a9565b604051908082528060200260200182016040528015611b2d57816020015b6060815260200190600190039081611b185790505b50905060008367ffffffffffffffff811115611b4b57611b4b6127a9565b604051908082528060200260200182016040528015611b74578160200160208202803683370190505b50905060005b84811015611d045760658181548110611b9557611b95612b25565b600091825260209091206003909102015484516001600160a01b0390911690859083908110611bc657611bc6612b25565b60200260200101906001600160a01b031690816001600160a01b03168152505060658181548110611bf957611bf9612b25565b90600052602060002090600302016001018054611c1590612bf6565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4190612bf6565b8015611c8e5780601f10611c6357610100808354040283529160200191611c8e565b820191906000526020600020905b815481529060010190602001808311611c7157829003601f168201915b5050505050838281518110611ca557611ca5612b25565b602002602001018190525060658181548110611cc357611cc3612b25565b906000526020600020906003020160020154828281518110611ce757611ce7612b25565b602090810291909101015280611cfc81612b51565b915050611b7a565b509196909550909350915050565b6000818152606b6020526040812080546003820154600283015460058401546001850180546060968896889688968796899660ff9094169593946001600160a01b03938416946004820194909316926006909101908690611d7290612bf6565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9e90612bf6565b8015611deb5780601f10611dc057610100808354040283529160200191611deb565b820191906000526020600020905b815481529060010190602001808311611dce57829003601f168201915b50505050509550838054611dfe90612bf6565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2a90612bf6565b8015611e775780601f10611e4c57610100808354040283529160200191611e77565b820191906000526020600020905b815481529060010190602001808311611e5a57829003601f168201915b5050505050935080805480602002602001604051908101604052809291908181526020018280548015611ed357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611eb5575b505050505090509650965096509650965096509650919395979092949650565b606a546000908190815b81811015611f475784606a8281548110611f1957611f19612b25565b906000526020600020015403611f355760019350809250611f47565b80611f3f81612b51565b915050611efd565b5082611f655760405162461bcd60e51b81526004016102bb90612c30565b6000848152606b60205260409020600201546001600160a01b03163314611f9e5760405162461bcd60e51b81526004016102bb90612b6a565b6000848152606b602052604090205460ff1660021901612022576068546000858152606b6020526040902060050154611fd79190612bde565b431061201d5760405162461bcd60e51b815260206004820152601560248201527470726f706f73616c2069732065666665637469766560581b60448201526064016102bb565b6120ab565b6066546000858152606b60205260409020600501546120419190612bde565b43106120ab5760405162461bcd60e51b815260206004820152603360248201527f566f74696e672068617320616c7265616479207374617274656420616e642063604482015272185b9b9bdd081899481dda5d1a191c985dd959606a1b60648201526084016102bb565b815b6120b8600183612d1e565b81101561211857606a6120cc826001612bde565b815481106120dc576120dc612b25565b9060005260206000200154606a82815481106120fa576120fa612b25565b6000918252602090912001558061211081612b51565b9150506120ad565b50606a612126600183612d1e565b8154811061213657612136612b25565b6000918252602082200155606a80548061215257612152612d35565b600082815260208082208301600019908101839055909201909255858252606b905260408120805460ff191681559061218e60018301826126ab565b6002820180546001600160a01b031990811690915560038301805490911690556121bc6004830160006126ab565b60058201600090556006820160006121d491906126e5565b5050837f98397210b92c60979a43a58e8031fa9ec208314be7aadd29a6808e2a67296bbf4360405161220891815260200190565b60405180910390a250505050565b61221e6124ab565b6001600160a01b0381166122835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bb565b61228c81612505565b50565b600054610100900460ff16158080156122af5750600054600160ff909116105b806122c95750303b1580156122c9575060005460ff166001145b61232c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102bb565b6000805460ff19166001179055801561234f576000805461ff0019166101001790555b60006069819055604080516060810182526001600160a01b0386811682526020808301878152429484019490945260658054600181018255955282517f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7600390960295860180546001600160a01b0319169190931617825592518051929485949293612403937f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c89092019290910190612557565b506040820151816002015550507ffc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f84844260405161244393929190612935565b60405180910390a1506201518060665562093a8060675561a8c060685580156124a6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6033546001600160a01b03163314610aba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102bb565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805461256390612bf6565b90600052602060002090601f01602090048101928261258557600085556125cb565b82601f1061259e57805160ff19168380011785556125cb565b828001600101855582156125cb579182015b828111156125cb5782518255916020019190600101906125b0565b506125d79291506126ff565b5090565b8280548282559060005260206000209081019282156125cb579160200282015b828111156125cb57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906125fb565b82805461263c90612bf6565b90600052602060002090601f01602090048101928261265e57600085556125cb565b82601f1061266f57805485556125cb565b828001600101855582156125cb57600052602060002091601f016020900482015b828111156125cb578254825591600101919060010190612690565b5080546126b790612bf6565b6000825580601f106126c7575050565b601f01602090049060005260206000209081019061228c91906126ff565b508054600082559060005260206000209081019061228c91905b5b808211156125d75760008155600101612700565b803560ff8116811461272557600080fd5b919050565b6000806040838503121561273d57600080fd5b61274683612714565b946020939093013593505050565b600081518084526020808501945080840160005b8381101561278457815187529582019590820190600101612768565b509495945050505050565b6020815260006127a26020830184612754565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126127d057600080fd5b813567ffffffffffffffff808211156127eb576127eb6127a9565b604051601f8301601f19908116603f01168101908282118183101715612813576128136127a9565b8160405283815286602085880101111561282c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b038116811461272557600080fd5b6000806000806080858703121561287957600080fd5b61288285612714565b9350602085013567ffffffffffffffff8082111561289f57600080fd5b6128ab888389016127bf565b94506128b96040880161284c565b935060608701359150808211156128cf57600080fd5b506128dc878288016127bf565b91505092959194509250565b6000815180845260005b8181101561290e576020818501810151868301820152016128f2565b81811115612920576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090612959908301856128e8565b9050826040830152949350505050565b60006020828403121561297b57600080fd5b5035919050565b60006020828403121561299457600080fd5b6127a282612714565b600081518084526020808501945080840160005b838110156127845781516001600160a01b0316875295820195908201906001016129b1565b6060815260006129e9606083018661299d565b6020838203818501528186518084528284019150828160051b85010183890160005b83811015612a3957601f19878403018552612a278383516128e8565b94860194925090850190600101612a0b565b50508681036040880152612a4d8189612754565b9a9950505050505050505050565b60ff8816815260e060208201526000612a7760e08301896128e8565b6001600160a01b0388811660408501528382036060850152612a9982896128e8565b91508087166080850152508460a084015282810360c0840152612a4d818561299d565b600060208284031215612ace57600080fd5b6127a28261284c565b60008060408385031215612aea57600080fd5b612af38361284c565b9150602083013567ffffffffffffffff811115612b0f57600080fd5b612b1b858286016127bf565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612b6357612b63612b3b565b5060010190565b60208082526012908201527134b73b30b634b21036b9b39739b2b73232b960711b604082015260600190565b6001600160a01b0385168152608060208201819052600090612bba908301866128e8565b8281036040840152612bcc81866128e8565b91505082606083015295945050505050565b60008219821115612bf157612bf1612b3b565b500190565b600181811c90821680612c0a57607f821691505b602082108103612c2a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601390820152721a5b9d985b1a59081c1c9bdc1bdcd85b081a59606a1b604082015260600190565b60018060a01b0384168152600060206060818401526000855481600182811c915080831680612c8d57607f831692505b8583108103612caa57634e487b7160e01b85526022600452602485fd5b6060880183905260808801818015612cc95760018114612cda57612d05565b60ff19861682528782019650612d05565b60008c81526020902060005b86811015612cff57815484820152908501908901612ce6565b83019750505b5050505050508092505050826040830152949350505050565b600082821015612d3057612d30612b3b565b500390565b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615612d6557612d65612b3b565b500290565b600082612d8757634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220980cba1ceefa82d01ca88cc2dae463e2dfd85d4ec310fc1acd9b13b86388320c64736f6c634300080d0033",
}

// ProposalABI is the input ABI used to generate the binding from.
// Deprecated: Use ProposalMetaData.ABI instead.
var ProposalABI = ProposalMetaData.ABI

// ProposalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProposalMetaData.Bin instead.
var ProposalBin = ProposalMetaData.Bin

// DeployProposal deploys a new Ethereum contract, binding an instance of Proposal to it.
func DeployProposal(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Proposal, error) {
	parsed, err := ProposalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProposalBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Proposal{ProposalCaller: ProposalCaller{contract: contract}, ProposalTransactor: ProposalTransactor{contract: contract}, ProposalFilterer: ProposalFilterer{contract: contract}}, nil
}

// Proposal is an auto generated Go binding around an Ethereum contract.
type Proposal struct {
	ProposalCaller     // Read-only binding to the contract
	ProposalTransactor // Write-only binding to the contract
	ProposalFilterer   // Log filterer for contract events
}

// ProposalCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProposalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProposalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProposalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProposalSession struct {
	Contract     *Proposal         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProposalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProposalCallerSession struct {
	Contract *ProposalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProposalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProposalTransactorSession struct {
	Contract     *ProposalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProposalRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProposalRaw struct {
	Contract *Proposal // Generic contract binding to access the raw methods on
}

// ProposalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProposalCallerRaw struct {
	Contract *ProposalCaller // Generic read-only contract binding to access the raw methods on
}

// ProposalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProposalTransactorRaw struct {
	Contract *ProposalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProposal creates a new instance of Proposal, bound to a specific deployed contract.
func NewProposal(address common.Address, backend bind.ContractBackend) (*Proposal, error) {
	contract, err := bindProposal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proposal{ProposalCaller: ProposalCaller{contract: contract}, ProposalTransactor: ProposalTransactor{contract: contract}, ProposalFilterer: ProposalFilterer{contract: contract}}, nil
}

// NewProposalCaller creates a new read-only instance of Proposal, bound to a specific deployed contract.
func NewProposalCaller(address common.Address, caller bind.ContractCaller) (*ProposalCaller, error) {
	contract, err := bindProposal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProposalCaller{contract: contract}, nil
}

// NewProposalTransactor creates a new write-only instance of Proposal, bound to a specific deployed contract.
func NewProposalTransactor(address common.Address, transactor bind.ContractTransactor) (*ProposalTransactor, error) {
	contract, err := bindProposal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProposalTransactor{contract: contract}, nil
}

// NewProposalFilterer creates a new log filterer instance of Proposal, bound to a specific deployed contract.
func NewProposalFilterer(address common.Address, filterer bind.ContractFilterer) (*ProposalFilterer, error) {
	contract, err := bindProposal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProposalFilterer{contract: contract}, nil
}

// bindProposal binds a generic wrapper to an already deployed contract.
func bindProposal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProposalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proposal *ProposalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proposal.Contract.ProposalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proposal *ProposalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.Contract.ProposalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proposal *ProposalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proposal.Contract.ProposalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proposal *ProposalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proposal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proposal *ProposalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proposal *ProposalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proposal.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address, string, uint256)
func (_Proposal *ProposalCaller) GetAdmin(opts *bind.CallOpts) (common.Address, string, *big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), *new(string), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address, string, uint256)
func (_Proposal *ProposalSession) GetAdmin() (common.Address, string, *big.Int, error) {
	return _Proposal.Contract.GetAdmin(&_Proposal.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address, string, uint256)
func (_Proposal *ProposalCallerSession) GetAdmin() (common.Address, string, *big.Int, error) {
	return _Proposal.Contract.GetAdmin(&_Proposal.CallOpts)
}

// GetAllAuthority is a free data retrieval call binding the contract method 0x8eee1588.
//
// Solidity: function getAllAuthority() view returns(address[], string[], uint256[])
func (_Proposal *ProposalCaller) GetAllAuthority(opts *bind.CallOpts) ([]common.Address, []string, []*big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getAllAuthority")

	if err != nil {
		return *new([]common.Address), *new([]string), *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]string)).(*[]string)
	out2 := *abi.ConvertType(out[2], new([]*big.Int)).(*[]*big.Int)

	return out0, out1, out2, err

}

// GetAllAuthority is a free data retrieval call binding the contract method 0x8eee1588.
//
// Solidity: function getAllAuthority() view returns(address[], string[], uint256[])
func (_Proposal *ProposalSession) GetAllAuthority() ([]common.Address, []string, []*big.Int, error) {
	return _Proposal.Contract.GetAllAuthority(&_Proposal.CallOpts)
}

// GetAllAuthority is a free data retrieval call binding the contract method 0x8eee1588.
//
// Solidity: function getAllAuthority() view returns(address[], string[], uint256[])
func (_Proposal *ProposalCallerSession) GetAllAuthority() ([]common.Address, []string, []*big.Int, error) {
	return _Proposal.Contract.GetAllAuthority(&_Proposal.CallOpts)
}

// GetAllProposalId is a free data retrieval call binding the contract method 0x51ba9c54.
//
// Solidity: function getAllProposalId() view returns(uint256[])
func (_Proposal *ProposalCaller) GetAllProposalId(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getAllProposalId")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetAllProposalId is a free data retrieval call binding the contract method 0x51ba9c54.
//
// Solidity: function getAllProposalId() view returns(uint256[])
func (_Proposal *ProposalSession) GetAllProposalId() ([]*big.Int, error) {
	return _Proposal.Contract.GetAllProposalId(&_Proposal.CallOpts)
}

// GetAllProposalId is a free data retrieval call binding the contract method 0x51ba9c54.
//
// Solidity: function getAllProposalId() view returns(uint256[])
func (_Proposal *ProposalCallerSession) GetAllProposalId() ([]*big.Int, error) {
	return _Proposal.Contract.GetAllProposalId(&_Proposal.CallOpts)
}

// GetInterval is a free data retrieval call binding the contract method 0x7983d317.
//
// Solidity: function getInterval(uint8 flag) view returns(uint256)
func (_Proposal *ProposalCaller) GetInterval(opts *bind.CallOpts, flag uint8) (*big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getInterval", flag)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetInterval is a free data retrieval call binding the contract method 0x7983d317.
//
// Solidity: function getInterval(uint8 flag) view returns(uint256)
func (_Proposal *ProposalSession) GetInterval(flag uint8) (*big.Int, error) {
	return _Proposal.Contract.GetInterval(&_Proposal.CallOpts, flag)
}

// GetInterval is a free data retrieval call binding the contract method 0x7983d317.
//
// Solidity: function getInterval(uint8 flag) view returns(uint256)
func (_Proposal *ProposalCallerSession) GetInterval(flag uint8) (*big.Int, error) {
	return _Proposal.Contract.GetInterval(&_Proposal.CallOpts, flag)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalId) view returns(uint8, string, address, string, address, uint256, address[])
func (_Proposal *ProposalCaller) GetProposal(opts *bind.CallOpts, proposalId *big.Int) (uint8, string, common.Address, string, common.Address, *big.Int, []common.Address, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getProposal", proposalId)

	if err != nil {
		return *new(uint8), *new(string), *new(common.Address), *new(string), *new(common.Address), *new(*big.Int), *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	out2 := *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	out3 := *abi.ConvertType(out[3], new(string)).(*string)
	out4 := *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	out5 := *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	out6 := *abi.ConvertType(out[6], new([]common.Address)).(*[]common.Address)

	return out0, out1, out2, out3, out4, out5, out6, err

}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalId) view returns(uint8, string, address, string, address, uint256, address[])
func (_Proposal *ProposalSession) GetProposal(proposalId *big.Int) (uint8, string, common.Address, string, common.Address, *big.Int, []common.Address, error) {
	return _Proposal.Contract.GetProposal(&_Proposal.CallOpts, proposalId)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalId) view returns(uint8, string, address, string, address, uint256, address[])
func (_Proposal *ProposalCallerSession) GetProposal(proposalId *big.Int) (uint8, string, common.Address, string, common.Address, *big.Int, []common.Address, error) {
	return _Proposal.Contract.GetProposal(&_Proposal.CallOpts, proposalId)
}

// GetProposalId is a free data retrieval call binding the contract method 0x7c95ac27.
//
// Solidity: function getProposalId(uint256 blockNo) view returns(uint256[])
func (_Proposal *ProposalCaller) GetProposalId(opts *bind.CallOpts, blockNo *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getProposalId", blockNo)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetProposalId is a free data retrieval call binding the contract method 0x7c95ac27.
//
// Solidity: function getProposalId(uint256 blockNo) view returns(uint256[])
func (_Proposal *ProposalSession) GetProposalId(blockNo *big.Int) ([]*big.Int, error) {
	return _Proposal.Contract.GetProposalId(&_Proposal.CallOpts, blockNo)
}

// GetProposalId is a free data retrieval call binding the contract method 0x7c95ac27.
//
// Solidity: function getProposalId(uint256 blockNo) view returns(uint256[])
func (_Proposal *ProposalCallerSession) GetProposalId(blockNo *big.Int) ([]*big.Int, error) {
	return _Proposal.Contract.GetProposalId(&_Proposal.CallOpts, blockNo)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proposal *ProposalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proposal *ProposalSession) Owner() (common.Address, error) {
	return _Proposal.Contract.Owner(&_Proposal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proposal *ProposalCallerSession) Owner() (common.Address, error) {
	return _Proposal.Contract.Owner(&_Proposal.CallOpts)
}

// EffectProposal is a paid mutator transaction binding the contract method 0x79717e88.
//
// Solidity: function effectProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactor) EffectProposal(opts *bind.TransactOpts, proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "effectProposal", proposalId)
}

// EffectProposal is a paid mutator transaction binding the contract method 0x79717e88.
//
// Solidity: function effectProposal(uint256 proposalId) returns()
func (_Proposal *ProposalSession) EffectProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.EffectProposal(&_Proposal.TransactOpts, proposalId)
}

// EffectProposal is a paid mutator transaction binding the contract method 0x79717e88.
//
// Solidity: function effectProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactorSession) EffectProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.EffectProposal(&_Proposal.TransactOpts, proposalId)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address adminAddress, string serviceUrl) returns()
func (_Proposal *ProposalTransactor) Initialize(opts *bind.TransactOpts, adminAddress common.Address, serviceUrl string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "initialize", adminAddress, serviceUrl)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address adminAddress, string serviceUrl) returns()
func (_Proposal *ProposalSession) Initialize(adminAddress common.Address, serviceUrl string) (*types.Transaction, error) {
	return _Proposal.Contract.Initialize(&_Proposal.TransactOpts, adminAddress, serviceUrl)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address adminAddress, string serviceUrl) returns()
func (_Proposal *ProposalTransactorSession) Initialize(adminAddress common.Address, serviceUrl string) (*types.Transaction, error) {
	return _Proposal.Contract.Initialize(&_Proposal.TransactOpts, adminAddress, serviceUrl)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proposal *ProposalTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proposal *ProposalSession) RenounceOwnership() (*types.Transaction, error) {
	return _Proposal.Contract.RenounceOwnership(&_Proposal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proposal *ProposalTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Proposal.Contract.RenounceOwnership(&_Proposal.TransactOpts)
}

// SetInterval is a paid mutator transaction binding the contract method 0x4504109c.
//
// Solidity: function setInterval(uint8 flag, uint256 interval) returns()
func (_Proposal *ProposalTransactor) SetInterval(opts *bind.TransactOpts, flag uint8, interval *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "setInterval", flag, interval)
}

// SetInterval is a paid mutator transaction binding the contract method 0x4504109c.
//
// Solidity: function setInterval(uint8 flag, uint256 interval) returns()
func (_Proposal *ProposalSession) SetInterval(flag uint8, interval *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetInterval(&_Proposal.TransactOpts, flag, interval)
}

// SetInterval is a paid mutator transaction binding the contract method 0x4504109c.
//
// Solidity: function setInterval(uint8 flag, uint256 interval) returns()
func (_Proposal *ProposalTransactorSession) SetInterval(flag uint8, interval *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetInterval(&_Proposal.TransactOpts, flag, interval)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x5944d7af.
//
// Solidity: function submitProposal(uint8 proposalType, string proposalUrl, address candidate, string candidateServiceUrl) returns()
func (_Proposal *ProposalTransactor) SubmitProposal(opts *bind.TransactOpts, proposalType uint8, proposalUrl string, candidate common.Address, candidateServiceUrl string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "submitProposal", proposalType, proposalUrl, candidate, candidateServiceUrl)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x5944d7af.
//
// Solidity: function submitProposal(uint8 proposalType, string proposalUrl, address candidate, string candidateServiceUrl) returns()
func (_Proposal *ProposalSession) SubmitProposal(proposalType uint8, proposalUrl string, candidate common.Address, candidateServiceUrl string) (*types.Transaction, error) {
	return _Proposal.Contract.SubmitProposal(&_Proposal.TransactOpts, proposalType, proposalUrl, candidate, candidateServiceUrl)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x5944d7af.
//
// Solidity: function submitProposal(uint8 proposalType, string proposalUrl, address candidate, string candidateServiceUrl) returns()
func (_Proposal *ProposalTransactorSession) SubmitProposal(proposalType uint8, proposalUrl string, candidate common.Address, candidateServiceUrl string) (*types.Transaction, error) {
	return _Proposal.Contract.SubmitProposal(&_Proposal.TransactOpts, proposalType, proposalUrl, candidate, candidateServiceUrl)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proposal *ProposalTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proposal *ProposalSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.Contract.TransferOwnership(&_Proposal.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proposal *ProposalTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.Contract.TransferOwnership(&_Proposal.TransactOpts, newOwner)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactor) VoteProposal(opts *bind.TransactOpts, proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "voteProposal", proposalId)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 proposalId) returns()
func (_Proposal *ProposalSession) VoteProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.VoteProposal(&_Proposal.TransactOpts, proposalId)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactorSession) VoteProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.VoteProposal(&_Proposal.TransactOpts, proposalId)
}

// WithdrawProposal is a paid mutator transaction binding the contract method 0xe1f02ffa.
//
// Solidity: function withdrawProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactor) WithdrawProposal(opts *bind.TransactOpts, proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "withdrawProposal", proposalId)
}

// WithdrawProposal is a paid mutator transaction binding the contract method 0xe1f02ffa.
//
// Solidity: function withdrawProposal(uint256 proposalId) returns()
func (_Proposal *ProposalSession) WithdrawProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.WithdrawProposal(&_Proposal.TransactOpts, proposalId)
}

// WithdrawProposal is a paid mutator transaction binding the contract method 0xe1f02ffa.
//
// Solidity: function withdrawProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactorSession) WithdrawProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.WithdrawProposal(&_Proposal.TransactOpts, proposalId)
}

// ProposalAuthorityAddIterator is returned from FilterAuthorityAdd and is used to iterate over the raw logs and unpacked data for AuthorityAdd events raised by the Proposal contract.
type ProposalAuthorityAddIterator struct {
	Event *ProposalAuthorityAdd // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalAuthorityAddIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalAuthorityAdd)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalAuthorityAdd)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalAuthorityAddIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalAuthorityAddIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalAuthorityAdd represents a AuthorityAdd event raised by the Proposal contract.
type ProposalAuthorityAdd struct {
	Addr       common.Address
	ServiceUrl string
	JoinTime   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAuthorityAdd is a free log retrieval operation binding the contract event 0xfc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f.
//
// Solidity: event AuthorityAdd(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) FilterAuthorityAdd(opts *bind.FilterOpts) (*ProposalAuthorityAddIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "AuthorityAdd")
	if err != nil {
		return nil, err
	}
	return &ProposalAuthorityAddIterator{contract: _Proposal.contract, event: "AuthorityAdd", logs: logs, sub: sub}, nil
}

// WatchAuthorityAdd is a free log subscription operation binding the contract event 0xfc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f.
//
// Solidity: event AuthorityAdd(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) WatchAuthorityAdd(opts *bind.WatchOpts, sink chan<- *ProposalAuthorityAdd) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "AuthorityAdd")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalAuthorityAdd)
				if err := _Proposal.contract.UnpackLog(event, "AuthorityAdd", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityAdd is a log parse operation binding the contract event 0xfc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f.
//
// Solidity: event AuthorityAdd(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) ParseAuthorityAdd(log types.Log) (*ProposalAuthorityAdd, error) {
	event := new(ProposalAuthorityAdd)
	if err := _Proposal.contract.UnpackLog(event, "AuthorityAdd", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalAuthorityDeleteIterator is returned from FilterAuthorityDelete and is used to iterate over the raw logs and unpacked data for AuthorityDelete events raised by the Proposal contract.
type ProposalAuthorityDeleteIterator struct {
	Event *ProposalAuthorityDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalAuthorityDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalAuthorityDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalAuthorityDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalAuthorityDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalAuthorityDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalAuthorityDelete represents a AuthorityDelete event raised by the Proposal contract.
type ProposalAuthorityDelete struct {
	Addr       common.Address
	ServiceUrl string
	JoinTime   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAuthorityDelete is a free log retrieval operation binding the contract event 0xddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b.
//
// Solidity: event AuthorityDelete(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) FilterAuthorityDelete(opts *bind.FilterOpts) (*ProposalAuthorityDeleteIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "AuthorityDelete")
	if err != nil {
		return nil, err
	}
	return &ProposalAuthorityDeleteIterator{contract: _Proposal.contract, event: "AuthorityDelete", logs: logs, sub: sub}, nil
}

// WatchAuthorityDelete is a free log subscription operation binding the contract event 0xddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b.
//
// Solidity: event AuthorityDelete(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) WatchAuthorityDelete(opts *bind.WatchOpts, sink chan<- *ProposalAuthorityDelete) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "AuthorityDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalAuthorityDelete)
				if err := _Proposal.contract.UnpackLog(event, "AuthorityDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityDelete is a log parse operation binding the contract event 0xddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b.
//
// Solidity: event AuthorityDelete(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) ParseAuthorityDelete(log types.Log) (*ProposalAuthorityDelete, error) {
	event := new(ProposalAuthorityDelete)
	if err := _Proposal.contract.UnpackLog(event, "AuthorityDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Proposal contract.
type ProposalInitializedIterator struct {
	Event *ProposalInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalInitialized represents a Initialized event raised by the Proposal contract.
type ProposalInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proposal *ProposalFilterer) FilterInitialized(opts *bind.FilterOpts) (*ProposalInitializedIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ProposalInitializedIterator{contract: _Proposal.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proposal *ProposalFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ProposalInitialized) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalInitialized)
				if err := _Proposal.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proposal *ProposalFilterer) ParseInitialized(log types.Log) (*ProposalInitialized, error) {
	event := new(ProposalInitialized)
	if err := _Proposal.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalNewProposalIterator is returned from FilterNewProposal and is used to iterate over the raw logs and unpacked data for NewProposal events raised by the Proposal contract.
type ProposalNewProposalIterator struct {
	Event *ProposalNewProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalNewProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalNewProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalNewProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalNewProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalNewProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalNewProposal represents a NewProposal event raised by the Proposal contract.
type ProposalNewProposal struct {
	ProposalId          *big.Int
	ProposalType        uint8
	Submitter           common.Address
	Candidate           common.Address
	CandidateServiceUrl string
	ProposalUrl         string
	SubmitBlockNo       *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterNewProposal is a free log retrieval operation binding the contract event 0xe164703263a5127c249f60b9b2536e9e15ff486c85cfe32fd2a128eae337b184.
//
// Solidity: event NewProposal(uint256 indexed proposalId, uint8 indexed proposalType, address indexed submitter, address candidate, string candidateServiceUrl, string proposalUrl, uint256 submitBlockNo)
func (_Proposal *ProposalFilterer) FilterNewProposal(opts *bind.FilterOpts, proposalId []*big.Int, proposalType []uint8, submitter []common.Address) (*ProposalNewProposalIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}
	var proposalTypeRule []interface{}
	for _, proposalTypeItem := range proposalType {
		proposalTypeRule = append(proposalTypeRule, proposalTypeItem)
	}
	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "NewProposal", proposalIdRule, proposalTypeRule, submitterRule)
	if err != nil {
		return nil, err
	}
	return &ProposalNewProposalIterator{contract: _Proposal.contract, event: "NewProposal", logs: logs, sub: sub}, nil
}

// WatchNewProposal is a free log subscription operation binding the contract event 0xe164703263a5127c249f60b9b2536e9e15ff486c85cfe32fd2a128eae337b184.
//
// Solidity: event NewProposal(uint256 indexed proposalId, uint8 indexed proposalType, address indexed submitter, address candidate, string candidateServiceUrl, string proposalUrl, uint256 submitBlockNo)
func (_Proposal *ProposalFilterer) WatchNewProposal(opts *bind.WatchOpts, sink chan<- *ProposalNewProposal, proposalId []*big.Int, proposalType []uint8, submitter []common.Address) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}
	var proposalTypeRule []interface{}
	for _, proposalTypeItem := range proposalType {
		proposalTypeRule = append(proposalTypeRule, proposalTypeItem)
	}
	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "NewProposal", proposalIdRule, proposalTypeRule, submitterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalNewProposal)
				if err := _Proposal.contract.UnpackLog(event, "NewProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewProposal is a log parse operation binding the contract event 0xe164703263a5127c249f60b9b2536e9e15ff486c85cfe32fd2a128eae337b184.
//
// Solidity: event NewProposal(uint256 indexed proposalId, uint8 indexed proposalType, address indexed submitter, address candidate, string candidateServiceUrl, string proposalUrl, uint256 submitBlockNo)
func (_Proposal *ProposalFilterer) ParseNewProposal(log types.Log) (*ProposalNewProposal, error) {
	event := new(ProposalNewProposal)
	if err := _Proposal.contract.UnpackLog(event, "NewProposal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Proposal contract.
type ProposalOwnershipTransferredIterator struct {
	Event *ProposalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalOwnershipTransferred represents a OwnershipTransferred event raised by the Proposal contract.
type ProposalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProposalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProposalOwnershipTransferredIterator{contract: _Proposal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProposalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalOwnershipTransferred)
				if err := _Proposal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) ParseOwnershipTransferred(log types.Log) (*ProposalOwnershipTransferred, error) {
	event := new(ProposalOwnershipTransferred)
	if err := _Proposal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalProposalResultIterator is returned from FilterProposalResult and is used to iterate over the raw logs and unpacked data for ProposalResult events raised by the Proposal contract.
type ProposalProposalResultIterator struct {
	Event *ProposalProposalResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalProposalResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalProposalResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalProposalResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalProposalResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalProposalResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalProposalResult represents a ProposalResult event raised by the Proposal contract.
type ProposalProposalResult struct {
	ProposalId *big.Int
	Result     bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalResult is a free log retrieval operation binding the contract event 0x35baaec8d9c9da1c77f27119243a4384b49eae2bf0680aa0eebe3b62d28574a5.
//
// Solidity: event ProposalResult(uint256 indexed proposalId, bool result)
func (_Proposal *ProposalFilterer) FilterProposalResult(opts *bind.FilterOpts, proposalId []*big.Int) (*ProposalProposalResultIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ProposalResult", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return &ProposalProposalResultIterator{contract: _Proposal.contract, event: "ProposalResult", logs: logs, sub: sub}, nil
}

// WatchProposalResult is a free log subscription operation binding the contract event 0x35baaec8d9c9da1c77f27119243a4384b49eae2bf0680aa0eebe3b62d28574a5.
//
// Solidity: event ProposalResult(uint256 indexed proposalId, bool result)
func (_Proposal *ProposalFilterer) WatchProposalResult(opts *bind.WatchOpts, sink chan<- *ProposalProposalResult, proposalId []*big.Int) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ProposalResult", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalProposalResult)
				if err := _Proposal.contract.UnpackLog(event, "ProposalResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalResult is a log parse operation binding the contract event 0x35baaec8d9c9da1c77f27119243a4384b49eae2bf0680aa0eebe3b62d28574a5.
//
// Solidity: event ProposalResult(uint256 indexed proposalId, bool result)
func (_Proposal *ProposalFilterer) ParseProposalResult(log types.Log) (*ProposalProposalResult, error) {
	event := new(ProposalProposalResult)
	if err := _Proposal.contract.UnpackLog(event, "ProposalResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalVoteProposalIterator is returned from FilterVoteProposal and is used to iterate over the raw logs and unpacked data for VoteProposal events raised by the Proposal contract.
type ProposalVoteProposalIterator struct {
	Event *ProposalVoteProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalVoteProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalVoteProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalVoteProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalVoteProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalVoteProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalVoteProposal represents a VoteProposal event raised by the Proposal contract.
type ProposalVoteProposal struct {
	ProposalId *big.Int
	Voter      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVoteProposal is a free log retrieval operation binding the contract event 0xbb62908d9b5227a7f81807cfb2651e7167dc90cf52f25cdbd8f232ea7cb7f9c3.
//
// Solidity: event VoteProposal(uint256 indexed proposalId, address voter)
func (_Proposal *ProposalFilterer) FilterVoteProposal(opts *bind.FilterOpts, proposalId []*big.Int) (*ProposalVoteProposalIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "VoteProposal", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return &ProposalVoteProposalIterator{contract: _Proposal.contract, event: "VoteProposal", logs: logs, sub: sub}, nil
}

// WatchVoteProposal is a free log subscription operation binding the contract event 0xbb62908d9b5227a7f81807cfb2651e7167dc90cf52f25cdbd8f232ea7cb7f9c3.
//
// Solidity: event VoteProposal(uint256 indexed proposalId, address voter)
func (_Proposal *ProposalFilterer) WatchVoteProposal(opts *bind.WatchOpts, sink chan<- *ProposalVoteProposal, proposalId []*big.Int) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "VoteProposal", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalVoteProposal)
				if err := _Proposal.contract.UnpackLog(event, "VoteProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteProposal is a log parse operation binding the contract event 0xbb62908d9b5227a7f81807cfb2651e7167dc90cf52f25cdbd8f232ea7cb7f9c3.
//
// Solidity: event VoteProposal(uint256 indexed proposalId, address voter)
func (_Proposal *ProposalFilterer) ParseVoteProposal(log types.Log) (*ProposalVoteProposal, error) {
	event := new(ProposalVoteProposal)
	if err := _Proposal.contract.UnpackLog(event, "VoteProposal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalWithdrawProposalIterator is returned from FilterWithdrawProposal and is used to iterate over the raw logs and unpacked data for WithdrawProposal events raised by the Proposal contract.
type ProposalWithdrawProposalIterator struct {
	Event *ProposalWithdrawProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalWithdrawProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalWithdrawProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalWithdrawProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalWithdrawProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalWithdrawProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalWithdrawProposal represents a WithdrawProposal event raised by the Proposal contract.
type ProposalWithdrawProposal struct {
	ProposalId *big.Int
	BlockNo    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterWithdrawProposal is a free log retrieval operation binding the contract event 0x98397210b92c60979a43a58e8031fa9ec208314be7aadd29a6808e2a67296bbf.
//
// Solidity: event WithdrawProposal(uint256 indexed proposalId, uint256 blockNo)
func (_Proposal *ProposalFilterer) FilterWithdrawProposal(opts *bind.FilterOpts, proposalId []*big.Int) (*ProposalWithdrawProposalIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "WithdrawProposal", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return &ProposalWithdrawProposalIterator{contract: _Proposal.contract, event: "WithdrawProposal", logs: logs, sub: sub}, nil
}

// WatchWithdrawProposal is a free log subscription operation binding the contract event 0x98397210b92c60979a43a58e8031fa9ec208314be7aadd29a6808e2a67296bbf.
//
// Solidity: event WithdrawProposal(uint256 indexed proposalId, uint256 blockNo)
func (_Proposal *ProposalFilterer) WatchWithdrawProposal(opts *bind.WatchOpts, sink chan<- *ProposalWithdrawProposal, proposalId []*big.Int) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "WithdrawProposal", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalWithdrawProposal)
				if err := _Proposal.contract.UnpackLog(event, "WithdrawProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawProposal is a log parse operation binding the contract event 0x98397210b92c60979a43a58e8031fa9ec208314be7aadd29a6808e2a67296bbf.
//
// Solidity: event WithdrawProposal(uint256 indexed proposalId, uint256 blockNo)
func (_Proposal *ProposalFilterer) ParseWithdrawProposal(log types.Log) (*ProposalWithdrawProposal, error) {
	event := new(ProposalWithdrawProposal)
	if err := _Proposal.contract.UnpackLog(event, "WithdrawProposal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
