// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProposalMetaData contains all meta data concerning the Proposal contract.
var ProposalMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"joinTime\",\"type\":\"uint256\"}],\"name\":\"AuthorityAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"joinTime\",\"type\":\"uint256\"}],\"name\":\"AuthorityDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"candidateServiceUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submitBlockNo\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ProposalResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"WithdrawProposal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"effectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAuthority\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposalId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"getProposalId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"serviceUrl\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"proposalUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"candidateServiceUrl\",\"type\":\"string\"}],\"name\":\"submitProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"withdrawProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612f6e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637c95ac2711610097578063c7f758a811610066578063c7f758a814610209578063e1f02ffa1461022f578063f2fde38b14610242578063f399e22e1461025557600080fd5b80637c95ac27146101b1578063807896d5146101c45780638da5cb5b146101d75780638eee1588146101f257600080fd5b80636e9960c3116100d35780636e9960c31461016d578063715018a61461017557806379717e881461017d5780637983d3171461019057600080fd5b80634504109c1461010557806351ba9c541461011a5780635944d7af146101385780635fabcaaf1461014b575b600080fd5b6101186101133660046128d6565b610268565b005b610122610313565b60405161012f919061293b565b60405180910390f35b610118610146366004612a0f565b61036b565b61015e610159366004612a94565b6109b0565b60405161012f93929190612afc565b61015e610b3e565b610118610c54565b61011861018b366004612b30565b610c68565b6101a361019e366004612b49565b611753565b60405190815260200161012f565b6101226101bf366004612b30565b611790565b6101186101d2366004612b30565b6118f1565b6033546040516001600160a01b03909116815260200161012f565b6101fa611c3a565b60405161012f93929190612b9d565b61021c610217366004612b30565b611ebe565b60405161012f9796959493929190612c22565b61011861023d366004612b30565b61209f565b610118610250366004612a94565b6123c2565b610118610263366004612c83565b61243b565b606560008154811061027c5761027c612cd1565b60009182526020909120600390910201546001600160a01b031633146102e25760405162461bcd60e51b81526020600482015260166024820152754f6e6c792061646d696e2063616e20646f207468697360501b60448201526064015b60405180910390fd5b60018216156102f15760668190555b60028216156103005760678190555b600482161561030f5760688190555b5050565b6060606a80548060200260200160405190810160405280929190818152602001828054801561036157602002820191906000526020600020905b81548152602001906001019080831161034d575b5050505050905090565b60ff841660011480610380575060ff84166002145b8061038e575060ff84166003145b6103d25760405162461bcd60e51b8152602060048201526015602482015274496e76616c69642050726f706f73616c207479706560581b60448201526064016102d9565b606554600090815b8181101561043957336001600160a01b0316606582815481106103ff576103ff612cd1565b60009182526020909120600390910201546001600160a01b0316036104275760019250610439565b8061043181612cfd565b9150506103da565b50816104575760405162461bcd60e51b81526004016102d990612d16565b6000805b828110156104ba57856001600160a01b03166065828154811061048057610480612cd1565b60009182526020909120600390910201546001600160a01b0316036104a857600191506104ba565b806104b281612cfd565b91505061045b565b5060ff871660010361052c5780156105275760405162461bcd60e51b815260206004820152602a60248201527f63616e64696461746520697320616c726561647920696e2074686520617574686044820152691bdc9a5d1e481b1a5cdd60b21b60648201526084016102d9565b610638565b806105885760405162461bcd60e51b815260206004820152602660248201527f63616e646964617465206973206e6f7420696e2074686520617574686f7269746044820152651e481b1a5cdd60d21b60648201526084016102d9565b606560008154811061059c5761059c612cd1565b60009182526020909120600390910201546001600160a01b03908116908616036106385760405162461bcd60e51b815260206004820152604160248201527f61646d696e206973207468652070726f6a65637420706172747920616e64206360448201527f616e6e6f742077697468647261772066726f6d2074686520636f6d6d697474656064820152606560f81b608482015260a4016102d9565b606a5460005b8181101561070057866001600160a01b0316606b6000606a848154811061066757610667612cd1565b600091825260208083209091015483528201929092526040019020600301546001600160a01b0316036106ee5760405162461bcd60e51b815260206004820152602960248201527f63616e64696461746520697320616c726561647920696e206f6e65206f70656e604482015268081c1c9bdc1bdcd85b60ba1b60648201526084016102d9565b806106f881612cfd565b91505061063e565b5060ff881660021480610716575060ff88166003145b156107d05760005b818110156107ce57866001600160a01b0316606b6000606a848154811061074757610747612cd1565b600091825260208083209091015483528201929092526040019020600201546001600160a01b0316036107bc5760405162461bcd60e51b815260206004820152601d60248201527f63616e64696461746520686173206f70656e2070726f706f73616c732e00000060448201526064016102d9565b806107c681612cfd565b91505061071e565b505b6040518060e001604052808960ff168152602001888152602001336001600160a01b03168152602001876001600160a01b03168152602001868152602001438152602001600067ffffffffffffffff81111561082e5761082e612955565b604051908082528060200260200182016040528015610857578160200160208202803683370190505b5090526069546000908152606b602090815260409091208251815460ff191660ff909116178155828201518051919261089892600185019290910190612703565b5060408201516002820180546001600160a01b039283166001600160a01b0319918216179091556060840151600384018054919093169116179055608082015180516108ee916004840191602090910190612703565b5060a0820151600582015560c08201518051610914916006840191602090910190612787565b5050606954606a80546001810182556000919091527f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a510181905560405133925060ff8b1691907fe164703263a5127c249f60b9b2536e9e15ff486c85cfe32fd2a128eae337b1849061098d908b908b908e904390612d42565b60405180910390a46069546109a3906001612d8a565b6069555050505050505050565b604080516020810190915260008082526065549091606091839182918290815b81811015610b3057886001600160a01b0316606582815481106109f5576109f5612cd1565b60009182526020909120600390910201546001600160a01b031603610b1e5760658181548110610a2757610a27612cd1565b6000918252602090912060039091020154606580546001600160a01b0390921696509082908110610a5a57610a5a612cd1565b90600052602060002090600302016001018054610a7690612da2565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa290612da2565b8015610aef5780601f10610ac457610100808354040283529160200191610aef565b820191906000526020600020905b815481529060010190602001808311610ad257829003601f168201915b5050505050935060658181548110610b0957610b09612cd1565b90600052602060002090600302016002015492505b80610b2881612cfd565b9150506109d0565b509297919650945092505050565b6000606060006065600081548110610b5857610b58612cd1565b60009182526020822060039091020154606580546001600160a01b03909216929091610b8657610b86612cd1565b90600052602060002090600302016001016065600081548110610bab57610bab612cd1565b906000526020600020906003020160020154818054610bc990612da2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf590612da2565b8015610c425780601f10610c1757610100808354040283529160200191610c42565b820191906000526020600020905b815481529060010190602001808311610c2557829003601f168201915b50505050509150925092509250909192565b610c5c612657565b610c6660006126b1565b565b606a546000908190815b81811015610cbc5784606a8281548110610c8e57610c8e612cd1565b906000526020600020015403610caa5760019350809250610cbc565b80610cb481612cfd565b915050610c72565b5082610cda5760405162461bcd60e51b81526004016102d990612ddc565b6000848152606b60205260409020600201546001600160a01b03163314610d135760405162461bcd60e51b81526004016102d990612d16565b6065546000858152606b602052604081205490919060ff16600303611083576068546000878152606b6020526040902060050154610d519190612d8a565b431015610daa5760405162461bcd60e51b815260206004820152602160248201527f4e6f74207265616368696e67207468652065666665637469766520706572696f6044820152601960fa1b60648201526084016102d9565b60008060005b83811015610e27576000898152606b6020526040902060030154606580546001600160a01b039092169183908110610dea57610dea612cd1565b60009182526020909120600390910201546001600160a01b031603610e155760019150809250610e27565b80610e1f81612cfd565b915050610db0565b5080610e695760405162461bcd60e51b8152602060048201526011602482015270696e76616c69642063616e64696461746560781b60448201526064016102d9565b7fddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b60658381548110610e9d57610e9d612cd1565b6000918252602090912060039091020154606580546001600160a01b039092169185908110610ece57610ece612cd1565b906000526020600020906003020160010160658581548110610ef257610ef2612cd1565b906000526020600020906003020160020154604051610f1393929190612e09565b60405180910390a1815b610f28600185612eca565b811015610fd7576065610f3c826001612d8a565b81548110610f4c57610f4c612cd1565b906000526020600020906003020160658281548110610f6d57610f6d612cd1565b60009182526020909120825460039092020180546001600160a01b0319166001600160a01b039092169190911781556001808301805491830191610fb090612da2565b610fbb9291906127dc565b5060029182015491015580610fcf81612cfd565b915050610f1d565b506065610fe5600185612eca565b81548110610ff557610ff5612cd1565b60009182526020822060039091020180546001600160a01b0319168155906110206001830182612857565b60028201600090555050606580548061103b5761103b612ee1565b60008281526020812060036000199093019283020180546001600160a01b03191681559061106c6001830182612857565b6002820160009055505090556001935050506115e4565b6067546066546000888152606b60205260409020600501546110a59190612d8a565b6110af9190612d8a565b43116110f45760405162461bcd60e51b8152602060048201526014602482015273159bdd1a5b99c81a185cc81b9bdd08195b99195960621b60448201526064016102d9565b6000868152606b6020526040812060060154906003611114846002612ef7565b61111e9190612f16565b9050808211935083156115e1576000888152606b602052604090205460ff16600103611310576040805160608101825260008a8152606b602081815293822060038101546001600160a01b031684528c83529084526004018054919383019161118690612da2565b80601f01602080910402602001604051908101604052809291908181526020018280546111b290612da2565b80156111ff5780601f106111d4576101008083540402835291602001916111ff565b820191906000526020600020905b8154815290600101906020018083116111e257829003601f168201915b5050509183525050426020918201526065805460018101825560009190915282517f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7600390920291820180546001600160a01b0319166001600160a01b03909216919091178155838301518051949550859491936112a2937f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c80192910190612703565b5060409182015160029091015560008a8152606b602052819020600381015491517ffc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f92611302926001600160a01b03909116916004909101904290612e09565b60405180910390a1506115e1565b60008060005b8581101561138d5760008b8152606b6020526040902060030154606580546001600160a01b03909216918390811061135057611350612cd1565b60009182526020909120600390910201546001600160a01b03160361137b576001915080925061138d565b8061138581612cfd565b915050611316565b50806113cf5760405162461bcd60e51b8152602060048201526011602482015270696e76616c69642063616e64696461746560781b60448201526064016102d9565b7fddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b6065838154811061140357611403612cd1565b6000918252602090912060039091020154606580546001600160a01b03909216918590811061143457611434612cd1565b90600052602060002090600302016001016065858154811061145857611458612cd1565b90600052602060002090600302016002015460405161147993929190612e09565b60405180910390a1815b61148e600187612eca565b81101561153d5760656114a2826001612d8a565b815481106114b2576114b2612cd1565b9060005260206000209060030201606582815481106114d3576114d3612cd1565b60009182526020909120825460039092020180546001600160a01b0319166001600160a01b03909216919091178155600180830180549183019161151690612da2565b6115219291906127dc565b506002918201549101558061153581612cfd565b915050611483565b50606561154b600187612eca565b8154811061155b5761155b612cd1565b60009182526020822060039091020180546001600160a01b0319168155906115866001830182612857565b6002820160009055505060658054806115a1576115a1612ee1565b60008281526020812060036000199093019283020180546001600160a01b0319168155906115d26001830182612857565b60028201600090555050905550505b50505b835b6115f1600185612eca565b81101561165157606a611605826001612d8a565b8154811061161557611615612cd1565b9060005260206000200154606a828154811061163357611633612cd1565b6000918252602090912001558061164981612cfd565b9150506115e6565b50606a61165f600185612eca565b8154811061166f5761166f612cd1565b6000918252602082200155606a80548061168b5761168b612ee1565b600082815260208082208301600019908101839055909201909255878252606b905260408120805460ff19168155906116c76001830182612857565b6002820180546001600160a01b031990811690915560038301805490911690556116f5600483016000612857565b600582016000905560068201600061170d9190612891565b5050857f35baaec8d9c9da1c77f27119243a4384b49eae2bf0680aa0eebe3b62d28574a583604051611743911515815260200190565b60405180910390a2505050505050565b6000600182161561176657505060665490565b600282161561177757505060675490565b600482161561178857505060685490565b506000919050565b606a546060906000805b828110156117fc5784606b6000606a84815481106117ba576117ba612cd1565b9060005260206000200154815260200190815260200160002060050154106117ea57816117e681612cfd565b9250505b806117f481612cfd565b91505061179a565b5060008167ffffffffffffffff81111561181857611818612955565b604051908082528060200260200182016040528015611841578160200160208202803683370190505b5090506000915060005b838110156118e85785606b6000606a848154811061186b5761186b612cd1565b9060005260206000200154815260200190815260200160002060050154106118d657606a81815481106118a0576118a0612cd1565b90600052602060002001548284815181106118bd576118bd612cd1565b6020908102919091010152826118d281612cfd565b9350505b806118e081612cfd565b91505061184b565b50949350505050565b606a54600090815b818110156119405783606a828154811061191557611915612cd1565b90600052602060002001540361192e5760019250611940565b8061193881612cfd565b9150506118f9565b508161195e5760405162461bcd60e51b81526004016102d990612ddc565b6000838152606b602052604090205460ff166003036119ce5760405162461bcd60e51b815260206004820152602660248201527f4175746f6d61746963206578697420646f6573206e6f742072657175697265206044820152656120766f746560d01b60648201526084016102d9565b606554600090815b81811015611a3557336001600160a01b0316606582815481106119fb576119fb612cd1565b60009182526020909120600390910201546001600160a01b031603611a235760019250611a35565b80611a2d81612cfd565b9150506119d6565b5081611a535760405162461bcd60e51b81526004016102d990612d16565b6066546000868152606b6020526040902060050154611a729190612d8a565b4310158015611aac57506067546066546000878152606b6020526040902060050154611a9e9190612d8a565b611aa89190612d8a565b4311155b611b0d5760405162461bcd60e51b815260206004820152602c60248201527f566f74696e672073686f756c642062652077697468696e20746865207370656360448201526b1a599a5959081c195c9a5bd960a21b60648201526084016102d9565b6000858152606b6020526040812060060154815b81811015611b84576000888152606b60205260409020600601805433919083908110611b4f57611b4f612cd1565b6000918252602090912001546001600160a01b031603611b725760019250611b84565b80611b7c81612cfd565b915050611b21565b508115611bc65760405162461bcd60e51b815260206004820152601060248201526f21b0b713ba103b37ba329030b3b0b4b760811b60448201526064016102d9565b6000878152606b6020908152604080832060060180546001810182559084529282902090920180546001600160a01b03191633908117909155915191825288917fbb62908d9b5227a7f81807cfb2651e7167dc90cf52f25cdbd8f232ea7cb7f9c3910160405180910390a250505050505050565b6065546060908190819060008167ffffffffffffffff811115611c5f57611c5f612955565b604051908082528060200260200182016040528015611c88578160200160208202803683370190505b50905060008267ffffffffffffffff811115611ca657611ca6612955565b604051908082528060200260200182016040528015611cd957816020015b6060815260200190600190039081611cc45790505b50905060008367ffffffffffffffff811115611cf757611cf7612955565b604051908082528060200260200182016040528015611d20578160200160208202803683370190505b50905060005b84811015611eb05760658181548110611d4157611d41612cd1565b600091825260209091206003909102015484516001600160a01b0390911690859083908110611d7257611d72612cd1565b60200260200101906001600160a01b031690816001600160a01b03168152505060658181548110611da557611da5612cd1565b90600052602060002090600302016001018054611dc190612da2565b80601f0160208091040260200160405190810160405280929190818152602001828054611ded90612da2565b8015611e3a5780601f10611e0f57610100808354040283529160200191611e3a565b820191906000526020600020905b815481529060010190602001808311611e1d57829003601f168201915b5050505050838281518110611e5157611e51612cd1565b602002602001018190525060658181548110611e6f57611e6f612cd1565b906000526020600020906003020160020154828281518110611e9357611e93612cd1565b602090810291909101015280611ea881612cfd565b915050611d26565b509196909550909350915050565b6000818152606b6020526040812080546003820154600283015460058401546001850180546060968896889688968796899660ff9094169593946001600160a01b03938416946004820194909316926006909101908690611f1e90612da2565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4a90612da2565b8015611f975780601f10611f6c57610100808354040283529160200191611f97565b820191906000526020600020905b815481529060010190602001808311611f7a57829003601f168201915b50505050509550838054611faa90612da2565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd690612da2565b80156120235780601f10611ff857610100808354040283529160200191612023565b820191906000526020600020905b81548152906001019060200180831161200657829003601f168201915b505050505093508080548060200260200160405190810160405280929190818152602001828054801561207f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612061575b505050505090509650965096509650965096509650919395979092949650565b606a546000908190815b818110156120f35784606a82815481106120c5576120c5612cd1565b9060005260206000200154036120e157600193508092506120f3565b806120eb81612cfd565b9150506120a9565b50826121115760405162461bcd60e51b81526004016102d990612ddc565b6000848152606b60205260409020600201546001600160a01b0316331461214a5760405162461bcd60e51b81526004016102d990612d16565b6000848152606b602052604090205460ff16600219016121ce576068546000858152606b60205260409020600501546121839190612d8a565b43106121c95760405162461bcd60e51b815260206004820152601560248201527470726f706f73616c2069732065666665637469766560581b60448201526064016102d9565b612257565b6066546000858152606b60205260409020600501546121ed9190612d8a565b43106122575760405162461bcd60e51b815260206004820152603360248201527f566f74696e672068617320616c7265616479207374617274656420616e642063604482015272185b9b9bdd081899481dda5d1a191c985dd959606a1b60648201526084016102d9565b815b612264600183612eca565b8110156122c457606a612278826001612d8a565b8154811061228857612288612cd1565b9060005260206000200154606a82815481106122a6576122a6612cd1565b600091825260209091200155806122bc81612cfd565b915050612259565b50606a6122d2600183612eca565b815481106122e2576122e2612cd1565b6000918252602082200155606a8054806122fe576122fe612ee1565b600082815260208082208301600019908101839055909201909255858252606b905260408120805460ff191681559061233a6001830182612857565b6002820180546001600160a01b03199081169091556003830180549091169055612368600483016000612857565b60058201600090556006820160006123809190612891565b5050837f98397210b92c60979a43a58e8031fa9ec208314be7aadd29a6808e2a67296bbf436040516123b491815260200190565b60405180910390a250505050565b6123ca612657565b6001600160a01b03811661242f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d9565b612438816126b1565b50565b600054610100900460ff161580801561245b5750600054600160ff909116105b806124755750303b158015612475575060005460ff166001145b6124d85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102d9565b6000805460ff1916600117905580156124fb576000805461ff0019166101001790555b60006069819055604080516060810182526001600160a01b0386811682526020808301878152429484019490945260658054600181018255955282517f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7600390960295860180546001600160a01b03191691909316178255925180519294859492936125af937f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c89092019290910190612703565b506040820151816002015550507ffc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f8484426040516125ef93929190612afc565b60405180910390a1506201518060665562093a8060675561a8c06068558015612652576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6033546001600160a01b03163314610c665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805461270f90612da2565b90600052602060002090601f0160209004810192826127315760008555612777565b82601f1061274a57805160ff1916838001178555612777565b82800160010185558215612777579182015b8281111561277757825182559160200191906001019061275c565b506127839291506128ab565b5090565b828054828255906000526020600020908101928215612777579160200282015b8281111561277757825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906127a7565b8280546127e890612da2565b90600052602060002090601f01602090048101928261280a5760008555612777565b82601f1061281b5780548555612777565b8280016001018555821561277757600052602060002091601f016020900482015b8281111561277757825482559160010191906001019061283c565b50805461286390612da2565b6000825580601f10612873575050565b601f01602090049060005260206000209081019061243891906128ab565b508054600082559060005260206000209081019061243891905b5b8082111561278357600081556001016128ac565b803560ff811681146128d157600080fd5b919050565b600080604083850312156128e957600080fd5b6128f2836128c0565b946020939093013593505050565b600081518084526020808501945080840160005b8381101561293057815187529582019590820190600101612914565b509495945050505050565b60208152600061294e6020830184612900565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261297c57600080fd5b813567ffffffffffffffff8082111561299757612997612955565b604051601f8301601f19908116603f011681019082821181831017156129bf576129bf612955565b816040528381528660208588010111156129d857600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146128d157600080fd5b60008060008060808587031215612a2557600080fd5b612a2e856128c0565b9350602085013567ffffffffffffffff80821115612a4b57600080fd5b612a578883890161296b565b9450612a65604088016129f8565b93506060870135915080821115612a7b57600080fd5b50612a888782880161296b565b91505092959194509250565b600060208284031215612aa657600080fd5b61294e826129f8565b6000815180845260005b81811015612ad557602081850181015186830182015201612ab9565b81811115612ae7576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090612b2090830185612aaf565b9050826040830152949350505050565b600060208284031215612b4257600080fd5b5035919050565b600060208284031215612b5b57600080fd5b61294e826128c0565b600081518084526020808501945080840160005b838110156129305781516001600160a01b031687529582019590820190600101612b78565b606081526000612bb06060830186612b64565b6020838203818501528186518084528284019150828160051b85010183890160005b83811015612c0057601f19878403018552612bee838351612aaf565b94860194925090850190600101612bd2565b50508681036040880152612c148189612900565b9a9950505050505050505050565b60ff8816815260e060208201526000612c3e60e0830189612aaf565b6001600160a01b0388811660408501528382036060850152612c608289612aaf565b91508087166080850152508460a084015282810360c0840152612c148185612b64565b60008060408385031215612c9657600080fd5b612c9f836129f8565b9150602083013567ffffffffffffffff811115612cbb57600080fd5b612cc78582860161296b565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d0f57612d0f612ce7565b5060010190565b60208082526012908201527134b73b30b634b21036b9b39739b2b73232b960711b604082015260600190565b6001600160a01b0385168152608060208201819052600090612d6690830186612aaf565b8281036040840152612d788186612aaf565b91505082606083015295945050505050565b60008219821115612d9d57612d9d612ce7565b500190565b600181811c90821680612db657607f821691505b602082108103612dd657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601390820152721a5b9d985b1a59081c1c9bdc1bdcd85b081a59606a1b604082015260600190565b60018060a01b0384168152600060206060818401526000855481600182811c915080831680612e3957607f831692505b8583108103612e5657634e487b7160e01b85526022600452602485fd5b6060880183905260808801818015612e755760018114612e8657612eb1565b60ff19861682528782019650612eb1565b60008c81526020902060005b86811015612eab57815484820152908501908901612e92565b83019750505b5050505050508092505050826040830152949350505050565b600082821015612edc57612edc612ce7565b500390565b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615612f1157612f11612ce7565b500290565b600082612f3357634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212201161efb160c394f2c17fca2a25975bb75567e25b517dcaada9f876d36818f91864736f6c634300080d0033",
}

// ProposalABI is the input ABI used to generate the binding from.
// Deprecated: Use ProposalMetaData.ABI instead.
var ProposalABI = ProposalMetaData.ABI

// ProposalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProposalMetaData.Bin instead.
var ProposalBin = ProposalMetaData.Bin

// DeployProposal deploys a new Ethereum contract, binding an instance of Proposal to it.
func DeployProposal(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Proposal, error) {
	parsed, err := ProposalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProposalBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Proposal{ProposalCaller: ProposalCaller{contract: contract}, ProposalTransactor: ProposalTransactor{contract: contract}, ProposalFilterer: ProposalFilterer{contract: contract}}, nil
}

// Proposal is an auto generated Go binding around an Ethereum contract.
type Proposal struct {
	ProposalCaller     // Read-only binding to the contract
	ProposalTransactor // Write-only binding to the contract
	ProposalFilterer   // Log filterer for contract events
}

// ProposalCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProposalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProposalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProposalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProposalSession struct {
	Contract     *Proposal         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProposalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProposalCallerSession struct {
	Contract *ProposalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProposalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProposalTransactorSession struct {
	Contract     *ProposalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProposalRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProposalRaw struct {
	Contract *Proposal // Generic contract binding to access the raw methods on
}

// ProposalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProposalCallerRaw struct {
	Contract *ProposalCaller // Generic read-only contract binding to access the raw methods on
}

// ProposalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProposalTransactorRaw struct {
	Contract *ProposalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProposal creates a new instance of Proposal, bound to a specific deployed contract.
func NewProposal(address common.Address, backend bind.ContractBackend) (*Proposal, error) {
	contract, err := bindProposal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proposal{ProposalCaller: ProposalCaller{contract: contract}, ProposalTransactor: ProposalTransactor{contract: contract}, ProposalFilterer: ProposalFilterer{contract: contract}}, nil
}

// NewProposalCaller creates a new read-only instance of Proposal, bound to a specific deployed contract.
func NewProposalCaller(address common.Address, caller bind.ContractCaller) (*ProposalCaller, error) {
	contract, err := bindProposal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProposalCaller{contract: contract}, nil
}

// NewProposalTransactor creates a new write-only instance of Proposal, bound to a specific deployed contract.
func NewProposalTransactor(address common.Address, transactor bind.ContractTransactor) (*ProposalTransactor, error) {
	contract, err := bindProposal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProposalTransactor{contract: contract}, nil
}

// NewProposalFilterer creates a new log filterer instance of Proposal, bound to a specific deployed contract.
func NewProposalFilterer(address common.Address, filterer bind.ContractFilterer) (*ProposalFilterer, error) {
	contract, err := bindProposal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProposalFilterer{contract: contract}, nil
}

// bindProposal binds a generic wrapper to an already deployed contract.
func bindProposal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProposalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proposal *ProposalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proposal.Contract.ProposalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proposal *ProposalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.Contract.ProposalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proposal *ProposalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proposal.Contract.ProposalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proposal *ProposalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proposal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proposal *ProposalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proposal *ProposalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proposal.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address, string, uint256)
func (_Proposal *ProposalCaller) GetAdmin(opts *bind.CallOpts) (common.Address, string, *big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), *new(string), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address, string, uint256)
func (_Proposal *ProposalSession) GetAdmin() (common.Address, string, *big.Int, error) {
	return _Proposal.Contract.GetAdmin(&_Proposal.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address, string, uint256)
func (_Proposal *ProposalCallerSession) GetAdmin() (common.Address, string, *big.Int, error) {
	return _Proposal.Contract.GetAdmin(&_Proposal.CallOpts)
}

// GetAllAuthority is a free data retrieval call binding the contract method 0x8eee1588.
//
// Solidity: function getAllAuthority() view returns(address[], string[], uint256[])
func (_Proposal *ProposalCaller) GetAllAuthority(opts *bind.CallOpts) ([]common.Address, []string, []*big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getAllAuthority")

	if err != nil {
		return *new([]common.Address), *new([]string), *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]string)).(*[]string)
	out2 := *abi.ConvertType(out[2], new([]*big.Int)).(*[]*big.Int)

	return out0, out1, out2, err

}

// GetAllAuthority is a free data retrieval call binding the contract method 0x8eee1588.
//
// Solidity: function getAllAuthority() view returns(address[], string[], uint256[])
func (_Proposal *ProposalSession) GetAllAuthority() ([]common.Address, []string, []*big.Int, error) {
	return _Proposal.Contract.GetAllAuthority(&_Proposal.CallOpts)
}

// GetAllAuthority is a free data retrieval call binding the contract method 0x8eee1588.
//
// Solidity: function getAllAuthority() view returns(address[], string[], uint256[])
func (_Proposal *ProposalCallerSession) GetAllAuthority() ([]common.Address, []string, []*big.Int, error) {
	return _Proposal.Contract.GetAllAuthority(&_Proposal.CallOpts)
}

// GetAllProposalId is a free data retrieval call binding the contract method 0x51ba9c54.
//
// Solidity: function getAllProposalId() view returns(uint256[])
func (_Proposal *ProposalCaller) GetAllProposalId(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getAllProposalId")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetAllProposalId is a free data retrieval call binding the contract method 0x51ba9c54.
//
// Solidity: function getAllProposalId() view returns(uint256[])
func (_Proposal *ProposalSession) GetAllProposalId() ([]*big.Int, error) {
	return _Proposal.Contract.GetAllProposalId(&_Proposal.CallOpts)
}

// GetAllProposalId is a free data retrieval call binding the contract method 0x51ba9c54.
//
// Solidity: function getAllProposalId() view returns(uint256[])
func (_Proposal *ProposalCallerSession) GetAllProposalId() ([]*big.Int, error) {
	return _Proposal.Contract.GetAllProposalId(&_Proposal.CallOpts)
}

// GetAuthority is a free data retrieval call binding the contract method 0x5fabcaaf.
//
// Solidity: function getAuthority(address addr) view returns(address, string, uint256)
func (_Proposal *ProposalCaller) GetAuthority(opts *bind.CallOpts, addr common.Address) (common.Address, string, *big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getAuthority", addr)

	if err != nil {
		return *new(common.Address), *new(string), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetAuthority is a free data retrieval call binding the contract method 0x5fabcaaf.
//
// Solidity: function getAuthority(address addr) view returns(address, string, uint256)
func (_Proposal *ProposalSession) GetAuthority(addr common.Address) (common.Address, string, *big.Int, error) {
	return _Proposal.Contract.GetAuthority(&_Proposal.CallOpts, addr)
}

// GetAuthority is a free data retrieval call binding the contract method 0x5fabcaaf.
//
// Solidity: function getAuthority(address addr) view returns(address, string, uint256)
func (_Proposal *ProposalCallerSession) GetAuthority(addr common.Address) (common.Address, string, *big.Int, error) {
	return _Proposal.Contract.GetAuthority(&_Proposal.CallOpts, addr)
}

// GetInterval is a free data retrieval call binding the contract method 0x7983d317.
//
// Solidity: function getInterval(uint8 flag) view returns(uint256)
func (_Proposal *ProposalCaller) GetInterval(opts *bind.CallOpts, flag uint8) (*big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getInterval", flag)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetInterval is a free data retrieval call binding the contract method 0x7983d317.
//
// Solidity: function getInterval(uint8 flag) view returns(uint256)
func (_Proposal *ProposalSession) GetInterval(flag uint8) (*big.Int, error) {
	return _Proposal.Contract.GetInterval(&_Proposal.CallOpts, flag)
}

// GetInterval is a free data retrieval call binding the contract method 0x7983d317.
//
// Solidity: function getInterval(uint8 flag) view returns(uint256)
func (_Proposal *ProposalCallerSession) GetInterval(flag uint8) (*big.Int, error) {
	return _Proposal.Contract.GetInterval(&_Proposal.CallOpts, flag)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalId) view returns(uint8, string, address, string, address, uint256, address[])
func (_Proposal *ProposalCaller) GetProposal(opts *bind.CallOpts, proposalId *big.Int) (uint8, string, common.Address, string, common.Address, *big.Int, []common.Address, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getProposal", proposalId)

	if err != nil {
		return *new(uint8), *new(string), *new(common.Address), *new(string), *new(common.Address), *new(*big.Int), *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	out2 := *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	out3 := *abi.ConvertType(out[3], new(string)).(*string)
	out4 := *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	out5 := *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	out6 := *abi.ConvertType(out[6], new([]common.Address)).(*[]common.Address)

	return out0, out1, out2, out3, out4, out5, out6, err

}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalId) view returns(uint8, string, address, string, address, uint256, address[])
func (_Proposal *ProposalSession) GetProposal(proposalId *big.Int) (uint8, string, common.Address, string, common.Address, *big.Int, []common.Address, error) {
	return _Proposal.Contract.GetProposal(&_Proposal.CallOpts, proposalId)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalId) view returns(uint8, string, address, string, address, uint256, address[])
func (_Proposal *ProposalCallerSession) GetProposal(proposalId *big.Int) (uint8, string, common.Address, string, common.Address, *big.Int, []common.Address, error) {
	return _Proposal.Contract.GetProposal(&_Proposal.CallOpts, proposalId)
}

// GetProposalId is a free data retrieval call binding the contract method 0x7c95ac27.
//
// Solidity: function getProposalId(uint256 blockNo) view returns(uint256[])
func (_Proposal *ProposalCaller) GetProposalId(opts *bind.CallOpts, blockNo *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "getProposalId", blockNo)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetProposalId is a free data retrieval call binding the contract method 0x7c95ac27.
//
// Solidity: function getProposalId(uint256 blockNo) view returns(uint256[])
func (_Proposal *ProposalSession) GetProposalId(blockNo *big.Int) ([]*big.Int, error) {
	return _Proposal.Contract.GetProposalId(&_Proposal.CallOpts, blockNo)
}

// GetProposalId is a free data retrieval call binding the contract method 0x7c95ac27.
//
// Solidity: function getProposalId(uint256 blockNo) view returns(uint256[])
func (_Proposal *ProposalCallerSession) GetProposalId(blockNo *big.Int) ([]*big.Int, error) {
	return _Proposal.Contract.GetProposalId(&_Proposal.CallOpts, blockNo)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proposal *ProposalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proposal.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proposal *ProposalSession) Owner() (common.Address, error) {
	return _Proposal.Contract.Owner(&_Proposal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proposal *ProposalCallerSession) Owner() (common.Address, error) {
	return _Proposal.Contract.Owner(&_Proposal.CallOpts)
}

// EffectProposal is a paid mutator transaction binding the contract method 0x79717e88.
//
// Solidity: function effectProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactor) EffectProposal(opts *bind.TransactOpts, proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "effectProposal", proposalId)
}

// EffectProposal is a paid mutator transaction binding the contract method 0x79717e88.
//
// Solidity: function effectProposal(uint256 proposalId) returns()
func (_Proposal *ProposalSession) EffectProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.EffectProposal(&_Proposal.TransactOpts, proposalId)
}

// EffectProposal is a paid mutator transaction binding the contract method 0x79717e88.
//
// Solidity: function effectProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactorSession) EffectProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.EffectProposal(&_Proposal.TransactOpts, proposalId)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address adminAddress, string serviceUrl) returns()
func (_Proposal *ProposalTransactor) Initialize(opts *bind.TransactOpts, adminAddress common.Address, serviceUrl string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "initialize", adminAddress, serviceUrl)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address adminAddress, string serviceUrl) returns()
func (_Proposal *ProposalSession) Initialize(adminAddress common.Address, serviceUrl string) (*types.Transaction, error) {
	return _Proposal.Contract.Initialize(&_Proposal.TransactOpts, adminAddress, serviceUrl)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address adminAddress, string serviceUrl) returns()
func (_Proposal *ProposalTransactorSession) Initialize(adminAddress common.Address, serviceUrl string) (*types.Transaction, error) {
	return _Proposal.Contract.Initialize(&_Proposal.TransactOpts, adminAddress, serviceUrl)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proposal *ProposalTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proposal *ProposalSession) RenounceOwnership() (*types.Transaction, error) {
	return _Proposal.Contract.RenounceOwnership(&_Proposal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proposal *ProposalTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Proposal.Contract.RenounceOwnership(&_Proposal.TransactOpts)
}

// SetInterval is a paid mutator transaction binding the contract method 0x4504109c.
//
// Solidity: function setInterval(uint8 flag, uint256 interval) returns()
func (_Proposal *ProposalTransactor) SetInterval(opts *bind.TransactOpts, flag uint8, interval *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "setInterval", flag, interval)
}

// SetInterval is a paid mutator transaction binding the contract method 0x4504109c.
//
// Solidity: function setInterval(uint8 flag, uint256 interval) returns()
func (_Proposal *ProposalSession) SetInterval(flag uint8, interval *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetInterval(&_Proposal.TransactOpts, flag, interval)
}

// SetInterval is a paid mutator transaction binding the contract method 0x4504109c.
//
// Solidity: function setInterval(uint8 flag, uint256 interval) returns()
func (_Proposal *ProposalTransactorSession) SetInterval(flag uint8, interval *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetInterval(&_Proposal.TransactOpts, flag, interval)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x5944d7af.
//
// Solidity: function submitProposal(uint8 proposalType, string proposalUrl, address candidate, string candidateServiceUrl) returns()
func (_Proposal *ProposalTransactor) SubmitProposal(opts *bind.TransactOpts, proposalType uint8, proposalUrl string, candidate common.Address, candidateServiceUrl string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "submitProposal", proposalType, proposalUrl, candidate, candidateServiceUrl)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x5944d7af.
//
// Solidity: function submitProposal(uint8 proposalType, string proposalUrl, address candidate, string candidateServiceUrl) returns()
func (_Proposal *ProposalSession) SubmitProposal(proposalType uint8, proposalUrl string, candidate common.Address, candidateServiceUrl string) (*types.Transaction, error) {
	return _Proposal.Contract.SubmitProposal(&_Proposal.TransactOpts, proposalType, proposalUrl, candidate, candidateServiceUrl)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x5944d7af.
//
// Solidity: function submitProposal(uint8 proposalType, string proposalUrl, address candidate, string candidateServiceUrl) returns()
func (_Proposal *ProposalTransactorSession) SubmitProposal(proposalType uint8, proposalUrl string, candidate common.Address, candidateServiceUrl string) (*types.Transaction, error) {
	return _Proposal.Contract.SubmitProposal(&_Proposal.TransactOpts, proposalType, proposalUrl, candidate, candidateServiceUrl)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proposal *ProposalTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proposal *ProposalSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.Contract.TransferOwnership(&_Proposal.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proposal *ProposalTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.Contract.TransferOwnership(&_Proposal.TransactOpts, newOwner)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactor) VoteProposal(opts *bind.TransactOpts, proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "voteProposal", proposalId)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 proposalId) returns()
func (_Proposal *ProposalSession) VoteProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.VoteProposal(&_Proposal.TransactOpts, proposalId)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactorSession) VoteProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.VoteProposal(&_Proposal.TransactOpts, proposalId)
}

// WithdrawProposal is a paid mutator transaction binding the contract method 0xe1f02ffa.
//
// Solidity: function withdrawProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactor) WithdrawProposal(opts *bind.TransactOpts, proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "withdrawProposal", proposalId)
}

// WithdrawProposal is a paid mutator transaction binding the contract method 0xe1f02ffa.
//
// Solidity: function withdrawProposal(uint256 proposalId) returns()
func (_Proposal *ProposalSession) WithdrawProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.WithdrawProposal(&_Proposal.TransactOpts, proposalId)
}

// WithdrawProposal is a paid mutator transaction binding the contract method 0xe1f02ffa.
//
// Solidity: function withdrawProposal(uint256 proposalId) returns()
func (_Proposal *ProposalTransactorSession) WithdrawProposal(proposalId *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.WithdrawProposal(&_Proposal.TransactOpts, proposalId)
}

// ProposalAuthorityAddIterator is returned from FilterAuthorityAdd and is used to iterate over the raw logs and unpacked data for AuthorityAdd events raised by the Proposal contract.
type ProposalAuthorityAddIterator struct {
	Event *ProposalAuthorityAdd // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalAuthorityAddIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalAuthorityAdd)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalAuthorityAdd)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalAuthorityAddIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalAuthorityAddIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalAuthorityAdd represents a AuthorityAdd event raised by the Proposal contract.
type ProposalAuthorityAdd struct {
	Addr       common.Address
	ServiceUrl string
	JoinTime   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAuthorityAdd is a free log retrieval operation binding the contract event 0xfc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f.
//
// Solidity: event AuthorityAdd(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) FilterAuthorityAdd(opts *bind.FilterOpts) (*ProposalAuthorityAddIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "AuthorityAdd")
	if err != nil {
		return nil, err
	}
	return &ProposalAuthorityAddIterator{contract: _Proposal.contract, event: "AuthorityAdd", logs: logs, sub: sub}, nil
}

// WatchAuthorityAdd is a free log subscription operation binding the contract event 0xfc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f.
//
// Solidity: event AuthorityAdd(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) WatchAuthorityAdd(opts *bind.WatchOpts, sink chan<- *ProposalAuthorityAdd) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "AuthorityAdd")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalAuthorityAdd)
				if err := _Proposal.contract.UnpackLog(event, "AuthorityAdd", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityAdd is a log parse operation binding the contract event 0xfc4d122a4bccbdd7e53bcd32506465b2beaf5b8d7a94a61584ead4579bd2982f.
//
// Solidity: event AuthorityAdd(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) ParseAuthorityAdd(log types.Log) (*ProposalAuthorityAdd, error) {
	event := new(ProposalAuthorityAdd)
	if err := _Proposal.contract.UnpackLog(event, "AuthorityAdd", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalAuthorityDeleteIterator is returned from FilterAuthorityDelete and is used to iterate over the raw logs and unpacked data for AuthorityDelete events raised by the Proposal contract.
type ProposalAuthorityDeleteIterator struct {
	Event *ProposalAuthorityDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalAuthorityDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalAuthorityDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalAuthorityDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalAuthorityDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalAuthorityDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalAuthorityDelete represents a AuthorityDelete event raised by the Proposal contract.
type ProposalAuthorityDelete struct {
	Addr       common.Address
	ServiceUrl string
	JoinTime   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAuthorityDelete is a free log retrieval operation binding the contract event 0xddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b.
//
// Solidity: event AuthorityDelete(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) FilterAuthorityDelete(opts *bind.FilterOpts) (*ProposalAuthorityDeleteIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "AuthorityDelete")
	if err != nil {
		return nil, err
	}
	return &ProposalAuthorityDeleteIterator{contract: _Proposal.contract, event: "AuthorityDelete", logs: logs, sub: sub}, nil
}

// WatchAuthorityDelete is a free log subscription operation binding the contract event 0xddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b.
//
// Solidity: event AuthorityDelete(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) WatchAuthorityDelete(opts *bind.WatchOpts, sink chan<- *ProposalAuthorityDelete) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "AuthorityDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalAuthorityDelete)
				if err := _Proposal.contract.UnpackLog(event, "AuthorityDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityDelete is a log parse operation binding the contract event 0xddeda8c33d662e4e2da6bfd07697f6727ca5272f8f6e37f2f7c2b99b9f86b40b.
//
// Solidity: event AuthorityDelete(address addr, string serviceUrl, uint256 joinTime)
func (_Proposal *ProposalFilterer) ParseAuthorityDelete(log types.Log) (*ProposalAuthorityDelete, error) {
	event := new(ProposalAuthorityDelete)
	if err := _Proposal.contract.UnpackLog(event, "AuthorityDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Proposal contract.
type ProposalInitializedIterator struct {
	Event *ProposalInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalInitialized represents a Initialized event raised by the Proposal contract.
type ProposalInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proposal *ProposalFilterer) FilterInitialized(opts *bind.FilterOpts) (*ProposalInitializedIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ProposalInitializedIterator{contract: _Proposal.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proposal *ProposalFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ProposalInitialized) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalInitialized)
				if err := _Proposal.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Proposal *ProposalFilterer) ParseInitialized(log types.Log) (*ProposalInitialized, error) {
	event := new(ProposalInitialized)
	if err := _Proposal.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalNewProposalIterator is returned from FilterNewProposal and is used to iterate over the raw logs and unpacked data for NewProposal events raised by the Proposal contract.
type ProposalNewProposalIterator struct {
	Event *ProposalNewProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalNewProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalNewProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalNewProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalNewProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalNewProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalNewProposal represents a NewProposal event raised by the Proposal contract.
type ProposalNewProposal struct {
	ProposalId          *big.Int
	ProposalType        uint8
	Submitter           common.Address
	Candidate           common.Address
	CandidateServiceUrl string
	ProposalUrl         string
	SubmitBlockNo       *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterNewProposal is a free log retrieval operation binding the contract event 0xe164703263a5127c249f60b9b2536e9e15ff486c85cfe32fd2a128eae337b184.
//
// Solidity: event NewProposal(uint256 indexed proposalId, uint8 indexed proposalType, address indexed submitter, address candidate, string candidateServiceUrl, string proposalUrl, uint256 submitBlockNo)
func (_Proposal *ProposalFilterer) FilterNewProposal(opts *bind.FilterOpts, proposalId []*big.Int, proposalType []uint8, submitter []common.Address) (*ProposalNewProposalIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}
	var proposalTypeRule []interface{}
	for _, proposalTypeItem := range proposalType {
		proposalTypeRule = append(proposalTypeRule, proposalTypeItem)
	}
	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "NewProposal", proposalIdRule, proposalTypeRule, submitterRule)
	if err != nil {
		return nil, err
	}
	return &ProposalNewProposalIterator{contract: _Proposal.contract, event: "NewProposal", logs: logs, sub: sub}, nil
}

// WatchNewProposal is a free log subscription operation binding the contract event 0xe164703263a5127c249f60b9b2536e9e15ff486c85cfe32fd2a128eae337b184.
//
// Solidity: event NewProposal(uint256 indexed proposalId, uint8 indexed proposalType, address indexed submitter, address candidate, string candidateServiceUrl, string proposalUrl, uint256 submitBlockNo)
func (_Proposal *ProposalFilterer) WatchNewProposal(opts *bind.WatchOpts, sink chan<- *ProposalNewProposal, proposalId []*big.Int, proposalType []uint8, submitter []common.Address) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}
	var proposalTypeRule []interface{}
	for _, proposalTypeItem := range proposalType {
		proposalTypeRule = append(proposalTypeRule, proposalTypeItem)
	}
	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "NewProposal", proposalIdRule, proposalTypeRule, submitterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalNewProposal)
				if err := _Proposal.contract.UnpackLog(event, "NewProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewProposal is a log parse operation binding the contract event 0xe164703263a5127c249f60b9b2536e9e15ff486c85cfe32fd2a128eae337b184.
//
// Solidity: event NewProposal(uint256 indexed proposalId, uint8 indexed proposalType, address indexed submitter, address candidate, string candidateServiceUrl, string proposalUrl, uint256 submitBlockNo)
func (_Proposal *ProposalFilterer) ParseNewProposal(log types.Log) (*ProposalNewProposal, error) {
	event := new(ProposalNewProposal)
	if err := _Proposal.contract.UnpackLog(event, "NewProposal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Proposal contract.
type ProposalOwnershipTransferredIterator struct {
	Event *ProposalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalOwnershipTransferred represents a OwnershipTransferred event raised by the Proposal contract.
type ProposalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProposalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProposalOwnershipTransferredIterator{contract: _Proposal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProposalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalOwnershipTransferred)
				if err := _Proposal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) ParseOwnershipTransferred(log types.Log) (*ProposalOwnershipTransferred, error) {
	event := new(ProposalOwnershipTransferred)
	if err := _Proposal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalProposalResultIterator is returned from FilterProposalResult and is used to iterate over the raw logs and unpacked data for ProposalResult events raised by the Proposal contract.
type ProposalProposalResultIterator struct {
	Event *ProposalProposalResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalProposalResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalProposalResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalProposalResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalProposalResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalProposalResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalProposalResult represents a ProposalResult event raised by the Proposal contract.
type ProposalProposalResult struct {
	ProposalId *big.Int
	Result     bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalResult is a free log retrieval operation binding the contract event 0x35baaec8d9c9da1c77f27119243a4384b49eae2bf0680aa0eebe3b62d28574a5.
//
// Solidity: event ProposalResult(uint256 indexed proposalId, bool result)
func (_Proposal *ProposalFilterer) FilterProposalResult(opts *bind.FilterOpts, proposalId []*big.Int) (*ProposalProposalResultIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ProposalResult", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return &ProposalProposalResultIterator{contract: _Proposal.contract, event: "ProposalResult", logs: logs, sub: sub}, nil
}

// WatchProposalResult is a free log subscription operation binding the contract event 0x35baaec8d9c9da1c77f27119243a4384b49eae2bf0680aa0eebe3b62d28574a5.
//
// Solidity: event ProposalResult(uint256 indexed proposalId, bool result)
func (_Proposal *ProposalFilterer) WatchProposalResult(opts *bind.WatchOpts, sink chan<- *ProposalProposalResult, proposalId []*big.Int) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ProposalResult", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalProposalResult)
				if err := _Proposal.contract.UnpackLog(event, "ProposalResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalResult is a log parse operation binding the contract event 0x35baaec8d9c9da1c77f27119243a4384b49eae2bf0680aa0eebe3b62d28574a5.
//
// Solidity: event ProposalResult(uint256 indexed proposalId, bool result)
func (_Proposal *ProposalFilterer) ParseProposalResult(log types.Log) (*ProposalProposalResult, error) {
	event := new(ProposalProposalResult)
	if err := _Proposal.contract.UnpackLog(event, "ProposalResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalVoteProposalIterator is returned from FilterVoteProposal and is used to iterate over the raw logs and unpacked data for VoteProposal events raised by the Proposal contract.
type ProposalVoteProposalIterator struct {
	Event *ProposalVoteProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalVoteProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalVoteProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalVoteProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalVoteProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalVoteProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalVoteProposal represents a VoteProposal event raised by the Proposal contract.
type ProposalVoteProposal struct {
	ProposalId *big.Int
	Voter      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVoteProposal is a free log retrieval operation binding the contract event 0xbb62908d9b5227a7f81807cfb2651e7167dc90cf52f25cdbd8f232ea7cb7f9c3.
//
// Solidity: event VoteProposal(uint256 indexed proposalId, address voter)
func (_Proposal *ProposalFilterer) FilterVoteProposal(opts *bind.FilterOpts, proposalId []*big.Int) (*ProposalVoteProposalIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "VoteProposal", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return &ProposalVoteProposalIterator{contract: _Proposal.contract, event: "VoteProposal", logs: logs, sub: sub}, nil
}

// WatchVoteProposal is a free log subscription operation binding the contract event 0xbb62908d9b5227a7f81807cfb2651e7167dc90cf52f25cdbd8f232ea7cb7f9c3.
//
// Solidity: event VoteProposal(uint256 indexed proposalId, address voter)
func (_Proposal *ProposalFilterer) WatchVoteProposal(opts *bind.WatchOpts, sink chan<- *ProposalVoteProposal, proposalId []*big.Int) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "VoteProposal", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalVoteProposal)
				if err := _Proposal.contract.UnpackLog(event, "VoteProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteProposal is a log parse operation binding the contract event 0xbb62908d9b5227a7f81807cfb2651e7167dc90cf52f25cdbd8f232ea7cb7f9c3.
//
// Solidity: event VoteProposal(uint256 indexed proposalId, address voter)
func (_Proposal *ProposalFilterer) ParseVoteProposal(log types.Log) (*ProposalVoteProposal, error) {
	event := new(ProposalVoteProposal)
	if err := _Proposal.contract.UnpackLog(event, "VoteProposal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProposalWithdrawProposalIterator is returned from FilterWithdrawProposal and is used to iterate over the raw logs and unpacked data for WithdrawProposal events raised by the Proposal contract.
type ProposalWithdrawProposalIterator struct {
	Event *ProposalWithdrawProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalWithdrawProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalWithdrawProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalWithdrawProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalWithdrawProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalWithdrawProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalWithdrawProposal represents a WithdrawProposal event raised by the Proposal contract.
type ProposalWithdrawProposal struct {
	ProposalId *big.Int
	BlockNo    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterWithdrawProposal is a free log retrieval operation binding the contract event 0x98397210b92c60979a43a58e8031fa9ec208314be7aadd29a6808e2a67296bbf.
//
// Solidity: event WithdrawProposal(uint256 indexed proposalId, uint256 blockNo)
func (_Proposal *ProposalFilterer) FilterWithdrawProposal(opts *bind.FilterOpts, proposalId []*big.Int) (*ProposalWithdrawProposalIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "WithdrawProposal", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return &ProposalWithdrawProposalIterator{contract: _Proposal.contract, event: "WithdrawProposal", logs: logs, sub: sub}, nil
}

// WatchWithdrawProposal is a free log subscription operation binding the contract event 0x98397210b92c60979a43a58e8031fa9ec208314be7aadd29a6808e2a67296bbf.
//
// Solidity: event WithdrawProposal(uint256 indexed proposalId, uint256 blockNo)
func (_Proposal *ProposalFilterer) WatchWithdrawProposal(opts *bind.WatchOpts, sink chan<- *ProposalWithdrawProposal, proposalId []*big.Int) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "WithdrawProposal", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalWithdrawProposal)
				if err := _Proposal.contract.UnpackLog(event, "WithdrawProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawProposal is a log parse operation binding the contract event 0x98397210b92c60979a43a58e8031fa9ec208314be7aadd29a6808e2a67296bbf.
//
// Solidity: event WithdrawProposal(uint256 indexed proposalId, uint256 blockNo)
func (_Proposal *ProposalFilterer) ParseWithdrawProposal(log types.Log) (*ProposalWithdrawProposal, error) {
	event := new(ProposalWithdrawProposal)
	if err := _Proposal.contract.UnpackLog(event, "WithdrawProposal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
